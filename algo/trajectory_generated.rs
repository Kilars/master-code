// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

// struct Point, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Point(pub [u8; 8]);
impl Default for Point { 
  fn default() -> Self { 
    Self([0; 8])
  }
}
impl core::fmt::Debug for Point {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Point")
      .field("lat", &self.lat())
      .field("lng", &self.lng())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Point {}
impl<'a> flatbuffers::Follow<'a> for Point {
  type Inner = &'a Point;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Point>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Point {
  type Inner = &'a Point;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Point>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Point {
    type Output = Point;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Point as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Point {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Point {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    lat: f32,
    lng: f32,
  ) -> Self {
    let mut s = Self([0; 8]);
    s.set_lat(lat);
    s.set_lng(lng);
    s
  }

  pub fn lat(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_lat(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn lng(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_lng(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

}

pub enum TrajectoryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Trajectory<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Trajectory<'a> {
  type Inner = Trajectory<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Trajectory<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_POLYLINE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Trajectory { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TrajectoryArgs<'args>
  ) -> flatbuffers::WIPOffset<Trajectory<'bldr>> {
    let mut builder = TrajectoryBuilder::new(_fbb);
    if let Some(x) = args.polyline { builder.add_polyline(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Trajectory::VT_ID, None)}
  }
  #[inline]
  pub fn polyline(&self) -> Option<flatbuffers::Vector<'a, Point>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Point>>>(Trajectory::VT_POLYLINE, None)}
  }
}

impl flatbuffers::Verifiable for Trajectory<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Point>>>("polyline", Self::VT_POLYLINE, false)?
     .finish();
    Ok(())
  }
}
pub struct TrajectoryArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub polyline: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Point>>>,
}
impl<'a> Default for TrajectoryArgs<'a> {
  #[inline]
  fn default() -> Self {
    TrajectoryArgs {
      id: None,
      polyline: None,
    }
  }
}

pub struct TrajectoryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TrajectoryBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Trajectory::VT_ID, id);
  }
  #[inline]
  pub fn add_polyline(&mut self, polyline: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Point>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Trajectory::VT_POLYLINE, polyline);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TrajectoryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TrajectoryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Trajectory<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Trajectory<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Trajectory");
      ds.field("id", &self.id());
      ds.field("polyline", &self.polyline());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Trajectory`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trajectory_unchecked`.
pub fn root_as_trajectory(buf: &[u8]) -> Result<Trajectory, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Trajectory>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Trajectory` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_trajectory_unchecked`.
pub fn size_prefixed_root_as_trajectory(buf: &[u8]) -> Result<Trajectory, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Trajectory>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Trajectory` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trajectory_unchecked`.
pub fn root_as_trajectory_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Trajectory<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Trajectory<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Trajectory` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trajectory_unchecked`.
pub fn size_prefixed_root_as_trajectory_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Trajectory<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Trajectory<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Trajectory and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Trajectory`.
pub unsafe fn root_as_trajectory_unchecked(buf: &[u8]) -> Trajectory {
  flatbuffers::root_unchecked::<Trajectory>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Trajectory and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Trajectory`.
pub unsafe fn size_prefixed_root_as_trajectory_unchecked(buf: &[u8]) -> Trajectory {
  flatbuffers::size_prefixed_root_unchecked::<Trajectory>(buf)
}
#[inline]
pub fn finish_trajectory_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Trajectory<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_trajectory_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Trajectory<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
