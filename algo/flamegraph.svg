<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1141.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="1043"><g><title>__cos_fma (1 samples, 0.10%)</title><rect x="0.0000%" y="1061" width="0.0959%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1071.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="0.0959%" y="1061" width="0.0959%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3459%" y="1071.50"></text></g><g><title>[[heap]] (3 samples, 0.29%)</title><rect x="0.0000%" y="1077" width="0.2876%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;]&gt; (1 samples, 0.10%)</title><rect x="0.1918%" y="1061" width="0.0959%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.4418%" y="1071.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="0.2876%" y="1061" width="0.0959%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.5376%" y="1071.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="0.2876%" y="1045" width="0.0959%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.5376%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.10%)</title><rect x="0.2876%" y="1029" width="0.0959%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.5376%" y="1039.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (1 samples, 0.10%)</title><rect x="0.2876%" y="1013" width="0.0959%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.5376%" y="1023.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (1 samples, 0.10%)</title><rect x="0.2876%" y="997" width="0.0959%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="1"/><text x="0.5376%" y="1007.50"></text></g><g><title>algo::algorithm::rest_main::_{{closure}} (1 samples, 0.10%)</title><rect x="0.2876%" y="981" width="0.0959%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="1"/><text x="0.5376%" y="991.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.10%)</title><rect x="0.2876%" y="965" width="0.0959%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="0.5376%" y="975.50"></text></g><g><title>algo::algorithm::rest_main::_{{closure}}::_{{closure}} (1 samples, 0.10%)</title><rect x="0.2876%" y="949" width="0.0959%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="0.5376%" y="959.50"></text></g><g><title>itertools::Itertools::collect_vec (1 samples, 0.10%)</title><rect x="0.2876%" y="933" width="0.0959%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.5376%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.10%)</title><rect x="0.2876%" y="917" width="0.0959%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.5376%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="0.2876%" y="901" width="0.0959%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.5376%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="0.2876%" y="885" width="0.0959%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.5376%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="0.2876%" y="869" width="0.0959%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.5376%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.10%)</title><rect x="0.2876%" y="853" width="0.0959%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="0.5376%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="0.2876%" y="837" width="0.0959%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="0.5376%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="0.2876%" y="821" width="0.0959%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.5376%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.10%)</title><rect x="0.2876%" y="805" width="0.0959%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.5376%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.10%)</title><rect x="0.2876%" y="789" width="0.0959%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="0.5376%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.10%)</title><rect x="0.2876%" y="773" width="0.0959%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.5376%" y="783.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.10%)</title><rect x="0.2876%" y="757" width="0.0959%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="0.5376%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.19%)</title><rect x="0.3835%" y="1061" width="0.1918%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="2"/><text x="0.6335%" y="1071.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.19%)</title><rect x="0.3835%" y="1045" width="0.1918%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="2"/><text x="0.6335%" y="1055.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.19%)</title><rect x="0.3835%" y="1029" width="0.1918%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="2"/><text x="0.6335%" y="1039.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for f32&gt;::deserialize (2 samples, 0.19%)</title><rect x="0.3835%" y="1013" width="0.1918%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="2"/><text x="0.6335%" y="1023.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_f32 (2 samples, 0.19%)</title><rect x="0.3835%" y="997" width="0.1918%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="2"/><text x="0.6335%" y="1007.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.19%)</title><rect x="0.3835%" y="981" width="0.1918%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="2"/><text x="0.6335%" y="991.50"></text></g><g><title>[[stack]] (4 samples, 0.38%)</title><rect x="0.2876%" y="1077" width="0.3835%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="4"/><text x="0.5376%" y="1087.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1 samples, 0.10%)</title><rect x="0.5753%" y="1061" width="0.0959%" height="15" fill="rgb(229,88,8)" fg:x="6" fg:w="1"/><text x="0.8253%" y="1071.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.48%)</title><rect x="0.6711%" y="949" width="0.4794%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="5"/><text x="0.9211%" y="959.50"></text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::optimize_matrix::_{{closure}}::_{{closure}} (5 samples, 0.48%)</title><rect x="0.6711%" y="933" width="0.4794%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="5"/><text x="0.9211%" y="943.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorithm&lt;D&gt;&gt;::with_closure_and_param::_{{closure}} (5 samples, 0.48%)</title><rect x="0.6711%" y="917" width="0.4794%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="5"/><text x="0.9211%" y="927.50"></text></g><g><title>core::ops::function::Fn::call (5 samples, 0.48%)</title><rect x="0.6711%" y="901" width="0.4794%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="5"/><text x="0.9211%" y="911.50"></text></g><g><title>algo::rest::Point::distance (5 samples, 0.48%)</title><rect x="0.6711%" y="885" width="0.4794%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="5"/><text x="0.9211%" y="895.50"></text></g><g><title>algo::rest::Point::haversine (5 samples, 0.48%)</title><rect x="0.6711%" y="869" width="0.4794%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="5"/><text x="0.9211%" y="879.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorithm&lt;D&gt;&gt;::with_closure_and_param (11 samples, 1.05%)</title><rect x="0.6711%" y="1061" width="1.0547%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="11"/><text x="0.9211%" y="1071.50"></text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::optimize_matrix (11 samples, 1.05%)</title><rect x="0.6711%" y="1045" width="1.0547%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="11"/><text x="0.9211%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (11 samples, 1.05%)</title><rect x="0.6711%" y="1029" width="1.0547%" height="15" fill="rgb(231,60,39)" fg:x="7" fg:w="11"/><text x="0.9211%" y="1039.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 1.05%)</title><rect x="0.6711%" y="1013" width="1.0547%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="11"/><text x="0.9211%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (11 samples, 1.05%)</title><rect x="0.6711%" y="997" width="1.0547%" height="15" fill="rgb(235,93,37)" fg:x="7" fg:w="11"/><text x="0.9211%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (11 samples, 1.05%)</title><rect x="0.6711%" y="981" width="1.0547%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="11"/><text x="0.9211%" y="991.50"></text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::optimize_matrix::_{{closure}} (11 samples, 1.05%)</title><rect x="0.6711%" y="965" width="1.0547%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="11"/><text x="0.9211%" y="975.50"></text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::preceeding_cost (6 samples, 0.58%)</title><rect x="1.1505%" y="949" width="0.5753%" height="15" fill="rgb(206,96,30)" fg:x="12" fg:w="6"/><text x="1.4005%" y="959.50"></text></g><g><title>[algo] (1 samples, 0.10%)</title><rect x="1.7258%" y="1061" width="0.0959%" height="15" fill="rgb(218,138,4)" fg:x="18" fg:w="1"/><text x="1.9758%" y="1071.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_seq (1 samples, 0.10%)</title><rect x="1.7258%" y="1045" width="0.0959%" height="15" fill="rgb(250,191,14)" fg:x="18" fg:w="1"/><text x="1.9758%" y="1055.50"></text></g><g><title>__GI___libc_free (2 samples, 0.19%)</title><rect x="1.8217%" y="1061" width="0.1918%" height="15" fill="rgb(239,60,40)" fg:x="19" fg:w="2"/><text x="2.0717%" y="1071.50"></text></g><g><title>__atan2 (3 samples, 0.29%)</title><rect x="2.0134%" y="1061" width="0.2876%" height="15" fill="rgb(206,27,48)" fg:x="21" fg:w="3"/><text x="2.2634%" y="1071.50"></text></g><g><title>__cos_fma (10 samples, 0.96%)</title><rect x="2.3011%" y="1061" width="0.9588%" height="15" fill="rgb(225,35,8)" fg:x="24" fg:w="10"/><text x="2.5511%" y="1071.50"></text></g><g><title>__ieee754_atan2_fma (4 samples, 0.38%)</title><rect x="3.2598%" y="1061" width="0.3835%" height="15" fill="rgb(250,213,24)" fg:x="34" fg:w="4"/><text x="3.5098%" y="1071.50"></text></g><g><title>__sin_fma (13 samples, 1.25%)</title><rect x="3.6433%" y="1061" width="1.2464%" height="15" fill="rgb(247,123,22)" fg:x="38" fg:w="13"/><text x="3.8933%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;]&gt; (3 samples, 0.29%)</title><rect x="4.8897%" y="1061" width="0.2876%" height="15" fill="rgb(231,138,38)" fg:x="51" fg:w="3"/><text x="5.1397%" y="1071.50"></text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::Restriction::contains (1 samples, 0.10%)</title><rect x="5.1774%" y="1061" width="0.0959%" height="15" fill="rgb(231,145,46)" fg:x="54" fg:w="1"/><text x="5.4274%" y="1071.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::atan2 (6 samples, 0.58%)</title><rect x="5.6568%" y="1045" width="0.5753%" height="15" fill="rgb(251,118,11)" fg:x="59" fg:w="6"/><text x="5.9068%" y="1055.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (4 samples, 0.38%)</title><rect x="6.2320%" y="1045" width="0.3835%" height="15" fill="rgb(217,147,25)" fg:x="65" fg:w="4"/><text x="6.4820%" y="1055.50"></text></g><g><title>haversine::distance (18 samples, 1.73%)</title><rect x="5.2733%" y="1061" width="1.7258%" height="15" fill="rgb(247,81,37)" fg:x="55" fg:w="18"/><text x="5.5233%" y="1071.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sin (4 samples, 0.38%)</title><rect x="6.6155%" y="1045" width="0.3835%" height="15" fill="rgb(209,12,38)" fg:x="69" fg:w="4"/><text x="6.8655%" y="1055.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end_seq (3 samples, 0.29%)</title><rect x="6.9990%" y="1061" width="0.2876%" height="15" fill="rgb(227,1,9)" fg:x="73" fg:w="3"/><text x="7.2490%" y="1071.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1 samples, 0.10%)</title><rect x="7.2867%" y="1061" width="0.0959%" height="15" fill="rgb(248,47,43)" fg:x="76" fg:w="1"/><text x="7.5367%" y="1071.50"></text></g><g><title>[unknown] (72 samples, 6.90%)</title><rect x="0.6711%" y="1077" width="6.9032%" height="15" fill="rgb(221,10,30)" fg:x="7" fg:w="72"/><text x="0.9211%" y="1087.50">[unknown]</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (2 samples, 0.19%)</title><rect x="7.3826%" y="1061" width="0.1918%" height="15" fill="rgb(210,229,1)" fg:x="77" fg:w="2"/><text x="7.6326%" y="1071.50"></text></g><g><title>_int_free (1 samples, 0.10%)</title><rect x="7.5743%" y="1077" width="0.0959%" height="15" fill="rgb(222,148,37)" fg:x="79" fg:w="1"/><text x="7.8243%" y="1087.50"></text></g><g><title>algo::algorithm::rest_main::_{{closure}}::_{{closure}}::_{{closure}} (1 samples, 0.10%)</title><rect x="8.2454%" y="389" width="0.0959%" height="15" fill="rgb(234,67,33)" fg:x="86" fg:w="1"/><text x="8.4954%" y="399.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.10%)</title><rect x="8.2454%" y="373" width="0.0959%" height="15" fill="rgb(247,98,35)" fg:x="86" fg:w="1"/><text x="8.4954%" y="383.50"></text></g><g><title>&lt;algo::rest::Point as core::convert::From&lt;(f32,f32)&gt;&gt;::from (1 samples, 0.10%)</title><rect x="8.2454%" y="357" width="0.0959%" height="15" fill="rgb(247,138,52)" fg:x="86" fg:w="1"/><text x="8.4954%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.29%)</title><rect x="8.1496%" y="485" width="0.2876%" height="15" fill="rgb(213,79,30)" fg:x="85" fg:w="3"/><text x="8.3996%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.29%)</title><rect x="8.1496%" y="469" width="0.2876%" height="15" fill="rgb(246,177,23)" fg:x="85" fg:w="3"/><text x="8.3996%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.29%)</title><rect x="8.1496%" y="453" width="0.2876%" height="15" fill="rgb(230,62,27)" fg:x="85" fg:w="3"/><text x="8.3996%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.29%)</title><rect x="8.1496%" y="437" width="0.2876%" height="15" fill="rgb(216,154,8)" fg:x="85" fg:w="3"/><text x="8.3996%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.29%)</title><rect x="8.1496%" y="421" width="0.2876%" height="15" fill="rgb(244,35,45)" fg:x="85" fg:w="3"/><text x="8.3996%" y="431.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.19%)</title><rect x="8.2454%" y="405" width="0.1918%" height="15" fill="rgb(251,115,12)" fg:x="86" fg:w="2"/><text x="8.4954%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.10%)</title><rect x="8.3413%" y="389" width="0.0959%" height="15" fill="rgb(240,54,50)" fg:x="87" fg:w="1"/><text x="8.5913%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (1 samples, 0.10%)</title><rect x="8.3413%" y="373" width="0.0959%" height="15" fill="rgb(233,84,52)" fg:x="87" fg:w="1"/><text x="8.5913%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.10%)</title><rect x="8.3413%" y="357" width="0.0959%" height="15" fill="rgb(207,117,47)" fg:x="87" fg:w="1"/><text x="8.5913%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (4 samples, 0.38%)</title><rect x="8.1496%" y="645" width="0.3835%" height="15" fill="rgb(249,43,39)" fg:x="85" fg:w="4"/><text x="8.3996%" y="655.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (4 samples, 0.38%)</title><rect x="8.1496%" y="629" width="0.3835%" height="15" fill="rgb(209,38,44)" fg:x="85" fg:w="4"/><text x="8.3996%" y="639.50"></text></g><g><title>algo::algorithm::rest_main::_{{closure}} (4 samples, 0.38%)</title><rect x="8.1496%" y="613" width="0.3835%" height="15" fill="rgb(236,212,23)" fg:x="85" fg:w="4"/><text x="8.3996%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (4 samples, 0.38%)</title><rect x="8.1496%" y="597" width="0.3835%" height="15" fill="rgb(242,79,21)" fg:x="85" fg:w="4"/><text x="8.3996%" y="607.50"></text></g><g><title>algo::algorithm::rest_main::_{{closure}}::_{{closure}} (4 samples, 0.38%)</title><rect x="8.1496%" y="581" width="0.3835%" height="15" fill="rgb(211,96,35)" fg:x="85" fg:w="4"/><text x="8.3996%" y="591.50"></text></g><g><title>itertools::Itertools::collect_vec (4 samples, 0.38%)</title><rect x="8.1496%" y="565" width="0.3835%" height="15" fill="rgb(253,215,40)" fg:x="85" fg:w="4"/><text x="8.3996%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.38%)</title><rect x="8.1496%" y="549" width="0.3835%" height="15" fill="rgb(211,81,21)" fg:x="85" fg:w="4"/><text x="8.3996%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.38%)</title><rect x="8.1496%" y="533" width="0.3835%" height="15" fill="rgb(208,190,38)" fg:x="85" fg:w="4"/><text x="8.3996%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.38%)</title><rect x="8.1496%" y="517" width="0.3835%" height="15" fill="rgb(235,213,38)" fg:x="85" fg:w="4"/><text x="8.3996%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.38%)</title><rect x="8.1496%" y="501" width="0.3835%" height="15" fill="rgb(237,122,38)" fg:x="85" fg:w="4"/><text x="8.3996%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.10%)</title><rect x="8.4372%" y="485" width="0.0959%" height="15" fill="rgb(244,218,35)" fg:x="88" fg:w="1"/><text x="8.6872%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="8.4372%" y="469" width="0.0959%" height="15" fill="rgb(240,68,47)" fg:x="88" fg:w="1"/><text x="8.6872%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="8.4372%" y="453" width="0.0959%" height="15" fill="rgb(210,16,53)" fg:x="88" fg:w="1"/><text x="8.6872%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.10%)</title><rect x="8.4372%" y="437" width="0.0959%" height="15" fill="rgb(235,124,12)" fg:x="88" fg:w="1"/><text x="8.6872%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.10%)</title><rect x="8.4372%" y="421" width="0.0959%" height="15" fill="rgb(224,169,11)" fg:x="88" fg:w="1"/><text x="8.6872%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.10%)</title><rect x="8.4372%" y="405" width="0.0959%" height="15" fill="rgb(250,166,2)" fg:x="88" fg:w="1"/><text x="8.6872%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.10%)</title><rect x="8.4372%" y="389" width="0.0959%" height="15" fill="rgb(242,216,29)" fg:x="88" fg:w="1"/><text x="8.6872%" y="399.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="8.4372%" y="373" width="0.0959%" height="15" fill="rgb(230,116,27)" fg:x="88" fg:w="1"/><text x="8.6872%" y="383.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="8.4372%" y="357" width="0.0959%" height="15" fill="rgb(228,99,48)" fg:x="88" fg:w="1"/><text x="8.6872%" y="367.50"></text></g><g><title>csv_core::reader::Dfa::get_output (3 samples, 0.29%)</title><rect x="8.9166%" y="533" width="0.2876%" height="15" fill="rgb(253,11,6)" fg:x="93" fg:w="3"/><text x="9.1666%" y="543.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (28 samples, 2.68%)</title><rect x="8.5331%" y="629" width="2.6846%" height="15" fill="rgb(247,143,39)" fg:x="89" fg:w="28"/><text x="8.7831%" y="639.50">cs..</text></g><g><title>csv::string_record::StringRecord::read (28 samples, 2.68%)</title><rect x="8.5331%" y="613" width="2.6846%" height="15" fill="rgb(236,97,10)" fg:x="89" fg:w="28"/><text x="8.7831%" y="623.50">cs..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (28 samples, 2.68%)</title><rect x="8.5331%" y="597" width="2.6846%" height="15" fill="rgb(233,208,19)" fg:x="89" fg:w="28"/><text x="8.7831%" y="607.50">cs..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (28 samples, 2.68%)</title><rect x="8.5331%" y="581" width="2.6846%" height="15" fill="rgb(216,164,2)" fg:x="89" fg:w="28"/><text x="8.7831%" y="591.50">cs..</text></g><g><title>csv_core::reader::Reader::read_record (28 samples, 2.68%)</title><rect x="8.5331%" y="565" width="2.6846%" height="15" fill="rgb(220,129,5)" fg:x="89" fg:w="28"/><text x="8.7831%" y="575.50">cs..</text></g><g><title>csv_core::reader::Reader::read_record_dfa (28 samples, 2.68%)</title><rect x="8.5331%" y="549" width="2.6846%" height="15" fill="rgb(242,17,10)" fg:x="89" fg:w="28"/><text x="8.7831%" y="559.50">cs..</text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (21 samples, 2.01%)</title><rect x="9.2042%" y="533" width="2.0134%" height="15" fill="rgb(242,107,0)" fg:x="96" fg:w="21"/><text x="9.4542%" y="543.50">c..</text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="11.4094%" y="245" width="0.0959%" height="15" fill="rgb(251,28,31)" fg:x="119" fg:w="1"/><text x="11.6594%" y="255.50"></text></g><g><title>_int_free (1 samples, 0.10%)</title><rect x="11.5053%" y="245" width="0.0959%" height="15" fill="rgb(233,223,10)" fg:x="120" fg:w="1"/><text x="11.7553%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.29%)</title><rect x="11.4094%" y="389" width="0.2876%" height="15" fill="rgb(215,21,27)" fg:x="119" fg:w="3"/><text x="11.6594%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.29%)</title><rect x="11.4094%" y="373" width="0.2876%" height="15" fill="rgb(232,23,21)" fg:x="119" fg:w="3"/><text x="11.6594%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.29%)</title><rect x="11.4094%" y="357" width="0.2876%" height="15" fill="rgb(244,5,23)" fg:x="119" fg:w="3"/><text x="11.6594%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.29%)</title><rect x="11.4094%" y="341" width="0.2876%" height="15" fill="rgb(226,81,46)" fg:x="119" fg:w="3"/><text x="11.6594%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.29%)</title><rect x="11.4094%" y="325" width="0.2876%" height="15" fill="rgb(247,70,30)" fg:x="119" fg:w="3"/><text x="11.6594%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.29%)</title><rect x="11.4094%" y="309" width="0.2876%" height="15" fill="rgb(212,68,19)" fg:x="119" fg:w="3"/><text x="11.6594%" y="319.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.29%)</title><rect x="11.4094%" y="293" width="0.2876%" height="15" fill="rgb(240,187,13)" fg:x="119" fg:w="3"/><text x="11.6594%" y="303.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.29%)</title><rect x="11.4094%" y="277" width="0.2876%" height="15" fill="rgb(223,113,26)" fg:x="119" fg:w="3"/><text x="11.6594%" y="287.50"></text></g><g><title>_int_realloc (3 samples, 0.29%)</title><rect x="11.4094%" y="261" width="0.2876%" height="15" fill="rgb(206,192,2)" fg:x="119" fg:w="3"/><text x="11.6594%" y="271.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="11.6012%" y="245" width="0.0959%" height="15" fill="rgb(241,108,4)" fg:x="121" fg:w="1"/><text x="11.8512%" y="255.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::next_char (1 samples, 0.10%)</title><rect x="12.9434%" y="165" width="0.0959%" height="15" fill="rgb(247,173,49)" fg:x="135" fg:w="1"/><text x="13.1934%" y="175.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::next (1 samples, 0.10%)</title><rect x="12.9434%" y="149" width="0.0959%" height="15" fill="rgb(224,114,35)" fg:x="135" fg:w="1"/><text x="13.1934%" y="159.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::next (1 samples, 0.10%)</title><rect x="12.9434%" y="133" width="0.0959%" height="15" fill="rgb(245,159,27)" fg:x="135" fg:w="1"/><text x="13.1934%" y="143.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::eat_char (3 samples, 0.29%)</title><rect x="13.9022%" y="133" width="0.2876%" height="15" fill="rgb(245,172,44)" fg:x="145" fg:w="3"/><text x="14.1522%" y="143.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::discard (3 samples, 0.29%)</title><rect x="13.9022%" y="117" width="0.2876%" height="15" fill="rgb(236,23,11)" fg:x="145" fg:w="3"/><text x="14.1522%" y="127.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::discard (3 samples, 0.29%)</title><rect x="13.9022%" y="101" width="0.2876%" height="15" fill="rgb(205,117,38)" fg:x="145" fg:w="3"/><text x="14.1522%" y="111.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::f64_from_parts (9 samples, 0.86%)</title><rect x="14.1898%" y="133" width="0.8629%" height="15" fill="rgb(237,72,25)" fg:x="148" fg:w="9"/><text x="14.4398%" y="143.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (6 samples, 0.58%)</title><rect x="15.0527%" y="85" width="0.5753%" height="15" fill="rgb(244,70,9)" fg:x="157" fg:w="6"/><text x="15.3027%" y="95.50"></text></g><g><title>serde::de::SeqAccess::next_element (32 samples, 3.07%)</title><rect x="12.7517%" y="197" width="3.0681%" height="15" fill="rgb(217,125,39)" fg:x="133" fg:w="32"/><text x="13.0017%" y="207.50">ser..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (31 samples, 2.97%)</title><rect x="12.8476%" y="181" width="2.9722%" height="15" fill="rgb(235,36,10)" fg:x="134" fg:w="31"/><text x="13.0976%" y="191.50">ser..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_number (29 samples, 2.78%)</title><rect x="13.0393%" y="165" width="2.7804%" height="15" fill="rgb(251,123,47)" fg:x="136" fg:w="29"/><text x="13.2893%" y="175.50">se..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (28 samples, 2.68%)</title><rect x="13.1352%" y="149" width="2.6846%" height="15" fill="rgb(221,13,13)" fg:x="137" fg:w="28"/><text x="13.3852%" y="159.50">se..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (8 samples, 0.77%)</title><rect x="15.0527%" y="133" width="0.7670%" height="15" fill="rgb(238,131,9)" fg:x="157" fg:w="8"/><text x="15.3027%" y="143.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (8 samples, 0.77%)</title><rect x="15.0527%" y="117" width="0.7670%" height="15" fill="rgb(211,50,8)" fg:x="157" fg:w="8"/><text x="15.3027%" y="127.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (8 samples, 0.77%)</title><rect x="15.0527%" y="101" width="0.7670%" height="15" fill="rgb(245,182,24)" fg:x="157" fg:w="8"/><text x="15.3027%" y="111.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (2 samples, 0.19%)</title><rect x="15.6280%" y="85" width="0.1918%" height="15" fill="rgb(242,14,37)" fg:x="163" fg:w="2"/><text x="15.8780%" y="95.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (35 samples, 3.36%)</title><rect x="12.7517%" y="245" width="3.3557%" height="15" fill="rgb(246,228,12)" fg:x="133" fg:w="35"/><text x="13.0017%" y="255.50">&lt;co..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for f32&gt;::deserialize (35 samples, 3.36%)</title><rect x="12.7517%" y="229" width="3.3557%" height="15" fill="rgb(213,55,15)" fg:x="133" fg:w="35"/><text x="13.0017%" y="239.50">ser..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_f32 (35 samples, 3.36%)</title><rect x="12.7517%" y="213" width="3.3557%" height="15" fill="rgb(209,9,3)" fg:x="133" fg:w="35"/><text x="13.0017%" y="223.50">&lt;&amp;m..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::deserialize_number (3 samples, 0.29%)</title><rect x="15.8198%" y="197" width="0.2876%" height="15" fill="rgb(230,59,30)" fg:x="165" fg:w="3"/><text x="16.0698%" y="207.50"></text></g><g><title>serde_json::de::ParserNumber::visit (3 samples, 0.29%)</title><rect x="15.8198%" y="181" width="0.2876%" height="15" fill="rgb(209,121,21)" fg:x="165" fg:w="3"/><text x="16.0698%" y="191.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for f32&gt;::deserialize::PrimitiveVisitor as serde::de::Visitor&gt;::visit_f64 (2 samples, 0.19%)</title><rect x="15.9156%" y="165" width="0.1918%" height="15" fill="rgb(220,109,13)" fg:x="166" fg:w="2"/><text x="16.1656%" y="175.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::copysign (2 samples, 0.19%)</title><rect x="15.9156%" y="149" width="0.1918%" height="15" fill="rgb(232,18,1)" fg:x="166" fg:w="2"/><text x="16.1656%" y="159.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (46 samples, 4.41%)</title><rect x="11.8888%" y="357" width="4.4104%" height="15" fill="rgb(215,41,42)" fg:x="124" fg:w="46"/><text x="12.1388%" y="367.50">&lt;core..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1)&gt;::deserialize (46 samples, 4.41%)</title><rect x="11.8888%" y="341" width="4.4104%" height="15" fill="rgb(224,123,36)" fg:x="124" fg:w="46"/><text x="12.1388%" y="351.50">serde..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_tuple (46 samples, 4.41%)</title><rect x="11.8888%" y="325" width="4.4104%" height="15" fill="rgb(240,125,3)" fg:x="124" fg:w="46"/><text x="12.1388%" y="335.50">&lt;&amp;mut..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (46 samples, 4.41%)</title><rect x="11.8888%" y="309" width="4.4104%" height="15" fill="rgb(205,98,50)" fg:x="124" fg:w="46"/><text x="12.1388%" y="319.50">&lt;&amp;mut..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for (T0,T1)&gt;::deserialize::TupleVisitor&lt;T0,T1&gt; as serde::de::Visitor&gt;::visit_seq (41 samples, 3.93%)</title><rect x="12.3682%" y="293" width="3.9310%" height="15" fill="rgb(205,185,37)" fg:x="129" fg:w="41"/><text x="12.6182%" y="303.50">&lt;ser..</text></g><g><title>serde::de::SeqAccess::next_element (40 samples, 3.84%)</title><rect x="12.4640%" y="277" width="3.8351%" height="15" fill="rgb(238,207,15)" fg:x="130" fg:w="40"/><text x="12.7140%" y="287.50">serd..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (39 samples, 3.74%)</title><rect x="12.5599%" y="261" width="3.7392%" height="15" fill="rgb(213,199,42)" fg:x="131" fg:w="39"/><text x="12.8099%" y="271.50">&lt;ser..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (2 samples, 0.19%)</title><rect x="16.1074%" y="245" width="0.1918%" height="15" fill="rgb(235,201,11)" fg:x="168" fg:w="2"/><text x="16.3574%" y="255.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.10%)</title><rect x="16.2033%" y="229" width="0.0959%" height="15" fill="rgb(207,46,11)" fg:x="169" fg:w="1"/><text x="16.4533%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.10%)</title><rect x="16.2033%" y="213" width="0.0959%" height="15" fill="rgb(241,35,35)" fg:x="169" fg:w="1"/><text x="16.4533%" y="223.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.10%)</title><rect x="16.2033%" y="197" width="0.0959%" height="15" fill="rgb(243,32,47)" fg:x="169" fg:w="1"/><text x="16.4533%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (86 samples, 8.25%)</title><rect x="8.1496%" y="901" width="8.2454%" height="15" fill="rgb(247,202,23)" fg:x="85" fg:w="86"/><text x="8.3996%" y="911.50">core::iter:..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (86 samples, 8.25%)</title><rect x="8.1496%" y="885" width="8.2454%" height="15" fill="rgb(219,102,11)" fg:x="85" fg:w="86"/><text x="8.3996%" y="895.50">&lt;core::resu..</text></g><g><title>core::iter::adapters::try_process (86 samples, 8.25%)</title><rect x="8.1496%" y="869" width="8.2454%" height="15" fill="rgb(243,110,44)" fg:x="85" fg:w="86"/><text x="8.3996%" y="879.50">core::iter:..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (86 samples, 8.25%)</title><rect x="8.1496%" y="853" width="8.2454%" height="15" fill="rgb(222,74,54)" fg:x="85" fg:w="86"/><text x="8.3996%" y="863.50">&lt;core::resu..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (86 samples, 8.25%)</title><rect x="8.1496%" y="837" width="8.2454%" height="15" fill="rgb(216,99,12)" fg:x="85" fg:w="86"/><text x="8.3996%" y="847.50">core::iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (86 samples, 8.25%)</title><rect x="8.1496%" y="821" width="8.2454%" height="15" fill="rgb(226,22,26)" fg:x="85" fg:w="86"/><text x="8.3996%" y="831.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (86 samples, 8.25%)</title><rect x="8.1496%" y="805" width="8.2454%" height="15" fill="rgb(217,163,10)" fg:x="85" fg:w="86"/><text x="8.3996%" y="815.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (86 samples, 8.25%)</title><rect x="8.1496%" y="789" width="8.2454%" height="15" fill="rgb(213,25,53)" fg:x="85" fg:w="86"/><text x="8.3996%" y="799.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (86 samples, 8.25%)</title><rect x="8.1496%" y="773" width="8.2454%" height="15" fill="rgb(252,105,26)" fg:x="85" fg:w="86"/><text x="8.3996%" y="783.50">&lt;alloc::vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (86 samples, 8.25%)</title><rect x="8.1496%" y="757" width="8.2454%" height="15" fill="rgb(220,39,43)" fg:x="85" fg:w="86"/><text x="8.3996%" y="767.50">alloc::vec:..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 8.25%)</title><rect x="8.1496%" y="741" width="8.2454%" height="15" fill="rgb(229,68,48)" fg:x="85" fg:w="86"/><text x="8.3996%" y="751.50">&lt;core::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (86 samples, 8.25%)</title><rect x="8.1496%" y="725" width="8.2454%" height="15" fill="rgb(252,8,32)" fg:x="85" fg:w="86"/><text x="8.3996%" y="735.50">core::iter:..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (86 samples, 8.25%)</title><rect x="8.1496%" y="709" width="8.2454%" height="15" fill="rgb(223,20,43)" fg:x="85" fg:w="86"/><text x="8.3996%" y="719.50">&lt;core::iter..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (86 samples, 8.25%)</title><rect x="8.1496%" y="693" width="8.2454%" height="15" fill="rgb(229,81,49)" fg:x="85" fg:w="86"/><text x="8.3996%" y="703.50">&lt;core::iter..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (86 samples, 8.25%)</title><rect x="8.1496%" y="677" width="8.2454%" height="15" fill="rgb(236,28,36)" fg:x="85" fg:w="86"/><text x="8.3996%" y="687.50">&lt;core::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (86 samples, 8.25%)</title><rect x="8.1496%" y="661" width="8.2454%" height="15" fill="rgb(249,185,26)" fg:x="85" fg:w="86"/><text x="8.3996%" y="671.50">core::iter:..</text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (82 samples, 7.86%)</title><rect x="8.5331%" y="645" width="7.8619%" height="15" fill="rgb(249,174,33)" fg:x="89" fg:w="82"/><text x="8.7831%" y="655.50">&lt;csv::reade..</text></g><g><title>csv::string_record::StringRecord::deserialize (54 samples, 5.18%)</title><rect x="11.2176%" y="629" width="5.1774%" height="15" fill="rgb(233,201,37)" fg:x="117" fg:w="54"/><text x="11.4676%" y="639.50">csv::s..</text></g><g><title>csv::deserializer::deserialize_string_record (54 samples, 5.18%)</title><rect x="11.2176%" y="613" width="5.1774%" height="15" fill="rgb(221,78,26)" fg:x="117" fg:w="54"/><text x="11.4676%" y="623.50">csv::d..</text></g><g><title>algo::algorithm::_::&lt;impl serde::de::Deserialize for algo::algorithm::CsvTrajectory&gt;::deserialize (54 samples, 5.18%)</title><rect x="11.2176%" y="597" width="5.1774%" height="15" fill="rgb(250,127,30)" fg:x="117" fg:w="54"/><text x="11.4676%" y="607.50">algo::..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (54 samples, 5.18%)</title><rect x="11.2176%" y="581" width="5.1774%" height="15" fill="rgb(230,49,44)" fg:x="117" fg:w="54"/><text x="11.4676%" y="591.50">&lt;&amp;mut ..</text></g><g><title>&lt;algo::algorithm::_::&lt;impl serde::de::Deserialize for algo::algorithm::CsvTrajectory&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (54 samples, 5.18%)</title><rect x="11.2176%" y="565" width="5.1774%" height="15" fill="rgb(229,67,23)" fg:x="117" fg:w="54"/><text x="11.4676%" y="575.50">&lt;algo:..</text></g><g><title>serde::de::MapAccess::next_value (54 samples, 5.18%)</title><rect x="11.2176%" y="549" width="5.1774%" height="15" fill="rgb(249,83,47)" fg:x="117" fg:w="54"/><text x="11.4676%" y="559.50">serde:..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::MapAccess&gt;::next_value_seed (54 samples, 5.18%)</title><rect x="11.2176%" y="533" width="5.1774%" height="15" fill="rgb(215,43,3)" fg:x="117" fg:w="54"/><text x="11.4676%" y="543.50">&lt;&amp;mut ..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (54 samples, 5.18%)</title><rect x="11.2176%" y="517" width="5.1774%" height="15" fill="rgb(238,154,13)" fg:x="117" fg:w="54"/><text x="11.4676%" y="527.50">&lt;core:..</text></g><g><title>&lt;&lt;algo::algorithm::_::&lt;impl serde::de::Deserialize for algo::algorithm::CsvTrajectory&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::__DeserializeWith as serde::de::Deserialize&gt;::deserialize (54 samples, 5.18%)</title><rect x="11.2176%" y="501" width="5.1774%" height="15" fill="rgb(219,56,2)" fg:x="117" fg:w="54"/><text x="11.4676%" y="511.50">&lt;&lt;algo..</text></g><g><title>algo::algorithm::deserialize_json_string (54 samples, 5.18%)</title><rect x="11.2176%" y="485" width="5.1774%" height="15" fill="rgb(233,0,4)" fg:x="117" fg:w="54"/><text x="11.4676%" y="495.50">algo::..</text></g><g><title>serde_json::de::from_str (54 samples, 5.18%)</title><rect x="11.2176%" y="469" width="5.1774%" height="15" fill="rgb(235,30,7)" fg:x="117" fg:w="54"/><text x="11.4676%" y="479.50">serde_..</text></g><g><title>serde_json::de::from_trait (54 samples, 5.18%)</title><rect x="11.2176%" y="453" width="5.1774%" height="15" fill="rgb(250,79,13)" fg:x="117" fg:w="54"/><text x="11.4676%" y="463.50">serde_..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (54 samples, 5.18%)</title><rect x="11.2176%" y="437" width="5.1774%" height="15" fill="rgb(211,146,34)" fg:x="117" fg:w="54"/><text x="11.4676%" y="447.50">serde:..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (54 samples, 5.18%)</title><rect x="11.2176%" y="421" width="5.1774%" height="15" fill="rgb(228,22,38)" fg:x="117" fg:w="54"/><text x="11.4676%" y="431.50">&lt;&amp;mut ..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (54 samples, 5.18%)</title><rect x="11.2176%" y="405" width="5.1774%" height="15" fill="rgb(235,168,5)" fg:x="117" fg:w="54"/><text x="11.4676%" y="415.50">&lt;serde..</text></g><g><title>serde::de::SeqAccess::next_element (49 samples, 4.70%)</title><rect x="11.6970%" y="389" width="4.6980%" height="15" fill="rgb(221,155,16)" fg:x="122" fg:w="49"/><text x="11.9470%" y="399.50">serde..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (49 samples, 4.70%)</title><rect x="11.6970%" y="373" width="4.6980%" height="15" fill="rgb(215,215,53)" fg:x="122" fg:w="49"/><text x="11.9470%" y="383.50">&lt;serd..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.10%)</title><rect x="16.2991%" y="357" width="0.0959%" height="15" fill="rgb(223,4,10)" fg:x="170" fg:w="1"/><text x="16.5491%" y="367.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.10%)</title><rect x="16.2991%" y="341" width="0.0959%" height="15" fill="rgb(234,103,6)" fg:x="170" fg:w="1"/><text x="16.5491%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (1 samples, 0.10%)</title><rect x="16.2991%" y="325" width="0.0959%" height="15" fill="rgb(227,97,0)" fg:x="170" fg:w="1"/><text x="16.5491%" y="335.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (1 samples, 0.10%)</title><rect x="16.2991%" y="309" width="0.0959%" height="15" fill="rgb(234,150,53)" fg:x="170" fg:w="1"/><text x="16.5491%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.19%)</title><rect x="16.9703%" y="245" width="0.1918%" height="15" fill="rgb(228,201,54)" fg:x="177" fg:w="2"/><text x="17.2203%" y="255.50"></text></g><g><title>&lt;algo::spatial_filter::PointWithIndexReference as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="17.6414%" y="229" width="0.0959%" height="15" fill="rgb(222,22,37)" fg:x="184" fg:w="1"/><text x="17.8914%" y="239.50"></text></g><g><title>core::clone::Clone::clone (1 samples, 0.10%)</title><rect x="17.6414%" y="213" width="0.0959%" height="15" fill="rgb(237,53,32)" fg:x="184" fg:w="1"/><text x="17.8914%" y="223.50"></text></g><g><title>&lt;rstar::node::RTreeNode&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.19%)</title><rect x="17.7373%" y="149" width="0.1918%" height="15" fill="rgb(233,25,53)" fg:x="185" fg:w="2"/><text x="17.9873%" y="159.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.38%)</title><rect x="17.9291%" y="53" width="0.3835%" height="15" fill="rgb(210,40,34)" fg:x="187" fg:w="4"/><text x="18.1791%" y="63.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="18.2167%" y="37" width="0.0959%" height="15" fill="rgb(241,220,44)" fg:x="190" fg:w="1"/><text x="18.4667%" y="47.50"></text></g><g><title>&lt;rstar::node::RTreeNode&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 1.25%)</title><rect x="17.1620%" y="245" width="1.2464%" height="15" fill="rgb(235,28,35)" fg:x="179" fg:w="13"/><text x="17.4120%" y="255.50"></text></g><g><title>&lt;rstar::node::ParentNode&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.67%)</title><rect x="17.7373%" y="229" width="0.6711%" height="15" fill="rgb(210,56,17)" fg:x="185" fg:w="7"/><text x="17.9873%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.67%)</title><rect x="17.7373%" y="213" width="0.6711%" height="15" fill="rgb(224,130,29)" fg:x="185" fg:w="7"/><text x="17.9873%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.67%)</title><rect x="17.7373%" y="197" width="0.6711%" height="15" fill="rgb(235,212,8)" fg:x="185" fg:w="7"/><text x="17.9873%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.67%)</title><rect x="17.7373%" y="181" width="0.6711%" height="15" fill="rgb(223,33,50)" fg:x="185" fg:w="7"/><text x="17.9873%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.67%)</title><rect x="17.7373%" y="165" width="0.6711%" height="15" fill="rgb(219,149,13)" fg:x="185" fg:w="7"/><text x="17.9873%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.48%)</title><rect x="17.9291%" y="149" width="0.4794%" height="15" fill="rgb(250,156,29)" fg:x="187" fg:w="5"/><text x="18.1791%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.48%)</title><rect x="17.9291%" y="133" width="0.4794%" height="15" fill="rgb(216,193,19)" fg:x="187" fg:w="5"/><text x="18.1791%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.48%)</title><rect x="17.9291%" y="117" width="0.4794%" height="15" fill="rgb(216,135,14)" fg:x="187" fg:w="5"/><text x="18.1791%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.48%)</title><rect x="17.9291%" y="101" width="0.4794%" height="15" fill="rgb(241,47,5)" fg:x="187" fg:w="5"/><text x="18.1791%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.48%)</title><rect x="17.9291%" y="85" width="0.4794%" height="15" fill="rgb(233,42,35)" fg:x="187" fg:w="5"/><text x="18.1791%" y="95.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.48%)</title><rect x="17.9291%" y="69" width="0.4794%" height="15" fill="rgb(231,13,6)" fg:x="187" fg:w="5"/><text x="18.1791%" y="79.50"></text></g><g><title>__rust_alloc (1 samples, 0.10%)</title><rect x="18.3126%" y="53" width="0.0959%" height="15" fill="rgb(207,181,40)" fg:x="191" fg:w="1"/><text x="18.5626%" y="63.50"></text></g><g><title>_int_malloc (6 samples, 0.58%)</title><rect x="18.4084%" y="133" width="0.5753%" height="15" fill="rgb(254,173,49)" fg:x="192" fg:w="6"/><text x="18.6584%" y="143.50"></text></g><g><title>sysmalloc (1 samples, 0.10%)</title><rect x="18.8878%" y="117" width="0.0959%" height="15" fill="rgb(221,1,38)" fg:x="197" fg:w="1"/><text x="19.1378%" y="127.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.67%)</title><rect x="18.4084%" y="149" width="0.6711%" height="15" fill="rgb(206,124,46)" fg:x="192" fg:w="7"/><text x="18.6584%" y="159.50"></text></g><g><title>checked_request2size (1 samples, 0.10%)</title><rect x="18.9837%" y="133" width="0.0959%" height="15" fill="rgb(249,21,11)" fg:x="198" fg:w="1"/><text x="19.2337%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.77%)</title><rect x="18.4084%" y="245" width="0.7670%" height="15" fill="rgb(222,201,40)" fg:x="192" fg:w="8"/><text x="18.6584%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.77%)</title><rect x="18.4084%" y="229" width="0.7670%" height="15" fill="rgb(235,61,29)" fg:x="192" fg:w="8"/><text x="18.6584%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.77%)</title><rect x="18.4084%" y="213" width="0.7670%" height="15" fill="rgb(219,207,3)" fg:x="192" fg:w="8"/><text x="18.6584%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.77%)</title><rect x="18.4084%" y="197" width="0.7670%" height="15" fill="rgb(222,56,46)" fg:x="192" fg:w="8"/><text x="18.6584%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.77%)</title><rect x="18.4084%" y="181" width="0.7670%" height="15" fill="rgb(239,76,54)" fg:x="192" fg:w="8"/><text x="18.6584%" y="191.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.77%)</title><rect x="18.4084%" y="165" width="0.7670%" height="15" fill="rgb(231,124,27)" fg:x="192" fg:w="8"/><text x="18.6584%" y="175.50"></text></g><g><title>__rust_alloc (1 samples, 0.10%)</title><rect x="19.0796%" y="149" width="0.0959%" height="15" fill="rgb(249,195,6)" fg:x="199" fg:w="1"/><text x="19.3296%" y="159.50"></text></g><g><title>&lt;rstar::node::RTreeNode&lt;T&gt; as core::clone::Clone&gt;::clone (27 samples, 2.59%)</title><rect x="16.6826%" y="341" width="2.5887%" height="15" fill="rgb(237,174,47)" fg:x="174" fg:w="27"/><text x="16.9326%" y="351.50">&lt;r..</text></g><g><title>&lt;rstar::node::ParentNode&lt;T&gt; as core::clone::Clone&gt;::clone (27 samples, 2.59%)</title><rect x="16.6826%" y="325" width="2.5887%" height="15" fill="rgb(206,201,31)" fg:x="174" fg:w="27"/><text x="16.9326%" y="335.50">&lt;r..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (24 samples, 2.30%)</title><rect x="16.9703%" y="309" width="2.3011%" height="15" fill="rgb(231,57,52)" fg:x="177" fg:w="24"/><text x="17.2203%" y="319.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (24 samples, 2.30%)</title><rect x="16.9703%" y="293" width="2.3011%" height="15" fill="rgb(248,177,22)" fg:x="177" fg:w="24"/><text x="17.2203%" y="303.50">a..</text></g><g><title>alloc::slice::hack::to_vec (24 samples, 2.30%)</title><rect x="16.9703%" y="277" width="2.3011%" height="15" fill="rgb(215,211,37)" fg:x="177" fg:w="24"/><text x="17.2203%" y="287.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (24 samples, 2.30%)</title><rect x="16.9703%" y="261" width="2.3011%" height="15" fill="rgb(241,128,51)" fg:x="177" fg:w="24"/><text x="17.2203%" y="271.50">&lt;..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.10%)</title><rect x="19.1755%" y="245" width="0.0959%" height="15" fill="rgb(227,165,31)" fg:x="200" fg:w="1"/><text x="19.4255%" y="255.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.19%)</title><rect x="19.2713%" y="245" width="0.1918%" height="15" fill="rgb(228,167,24)" fg:x="201" fg:w="2"/><text x="19.5213%" y="255.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="19.3672%" y="229" width="0.0959%" height="15" fill="rgb(228,143,12)" fg:x="202" fg:w="1"/><text x="19.6172%" y="239.50"></text></g><g><title>&lt;rstar::node::RTreeNode&lt;T&gt; as core::clone::Clone&gt;::clone (32 samples, 3.07%)</title><rect x="16.4909%" y="437" width="3.0681%" height="15" fill="rgb(249,149,8)" fg:x="172" fg:w="32"/><text x="16.7409%" y="447.50">&lt;rs..</text></g><g><title>&lt;rstar::node::ParentNode&lt;T&gt; as core::clone::Clone&gt;::clone (31 samples, 2.97%)</title><rect x="16.5868%" y="421" width="2.9722%" height="15" fill="rgb(243,35,44)" fg:x="173" fg:w="31"/><text x="16.8368%" y="431.50">&lt;rs..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (31 samples, 2.97%)</title><rect x="16.5868%" y="405" width="2.9722%" height="15" fill="rgb(246,89,9)" fg:x="173" fg:w="31"/><text x="16.8368%" y="415.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (31 samples, 2.97%)</title><rect x="16.5868%" y="389" width="2.9722%" height="15" fill="rgb(233,213,13)" fg:x="173" fg:w="31"/><text x="16.8368%" y="399.50">all..</text></g><g><title>alloc::slice::hack::to_vec (31 samples, 2.97%)</title><rect x="16.5868%" y="373" width="2.9722%" height="15" fill="rgb(233,141,41)" fg:x="173" fg:w="31"/><text x="16.8368%" y="383.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (31 samples, 2.97%)</title><rect x="16.5868%" y="357" width="2.9722%" height="15" fill="rgb(239,167,4)" fg:x="173" fg:w="31"/><text x="16.8368%" y="367.50">&lt;T ..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.29%)</title><rect x="19.2713%" y="341" width="0.2876%" height="15" fill="rgb(209,217,16)" fg:x="201" fg:w="3"/><text x="19.5213%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.29%)</title><rect x="19.2713%" y="325" width="0.2876%" height="15" fill="rgb(219,88,35)" fg:x="201" fg:w="3"/><text x="19.5213%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.29%)</title><rect x="19.2713%" y="309" width="0.2876%" height="15" fill="rgb(220,193,23)" fg:x="201" fg:w="3"/><text x="19.5213%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.29%)</title><rect x="19.2713%" y="293" width="0.2876%" height="15" fill="rgb(230,90,52)" fg:x="201" fg:w="3"/><text x="19.5213%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.29%)</title><rect x="19.2713%" y="277" width="0.2876%" height="15" fill="rgb(252,106,19)" fg:x="201" fg:w="3"/><text x="19.5213%" y="287.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.29%)</title><rect x="19.2713%" y="261" width="0.2876%" height="15" fill="rgb(206,74,20)" fg:x="201" fg:w="3"/><text x="19.5213%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.10%)</title><rect x="19.4631%" y="245" width="0.0959%" height="15" fill="rgb(230,138,44)" fg:x="203" fg:w="1"/><text x="19.7131%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 3.26%)</title><rect x="16.4909%" y="837" width="3.2598%" height="15" fill="rgb(235,182,43)" fg:x="172" fg:w="34"/><text x="16.7409%" y="847.50">&lt;co..</text></g><g><title>&lt;rstar::rtree::RTree&lt;T,Params&gt; as core::clone::Clone&gt;::clone (34 samples, 3.26%)</title><rect x="16.4909%" y="821" width="3.2598%" height="15" fill="rgb(242,16,51)" fg:x="172" fg:w="34"/><text x="16.7409%" y="831.50">&lt;rs..</text></g><g><title>&lt;rstar::node::ParentNode&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 3.26%)</title><rect x="16.4909%" y="805" width="3.2598%" height="15" fill="rgb(248,9,4)" fg:x="172" fg:w="34"/><text x="16.7409%" y="815.50">&lt;rs..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (34 samples, 3.26%)</title><rect x="16.4909%" y="789" width="3.2598%" height="15" fill="rgb(210,31,22)" fg:x="172" fg:w="34"/><text x="16.7409%" y="799.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (34 samples, 3.26%)</title><rect x="16.4909%" y="773" width="3.2598%" height="15" fill="rgb(239,54,39)" fg:x="172" fg:w="34"/><text x="16.7409%" y="783.50">all..</text></g><g><title>alloc::slice::hack::to_vec (34 samples, 3.26%)</title><rect x="16.4909%" y="757" width="3.2598%" height="15" fill="rgb(230,99,41)" fg:x="172" fg:w="34"/><text x="16.7409%" y="767.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (34 samples, 3.26%)</title><rect x="16.4909%" y="741" width="3.2598%" height="15" fill="rgb(253,106,12)" fg:x="172" fg:w="34"/><text x="16.7409%" y="751.50">&lt;T ..</text></g><g><title>&lt;rstar::node::RTreeNode&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 3.26%)</title><rect x="16.4909%" y="725" width="3.2598%" height="15" fill="rgb(213,46,41)" fg:x="172" fg:w="34"/><text x="16.7409%" y="735.50">&lt;rs..</text></g><g><title>&lt;rstar::node::ParentNode&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 3.26%)</title><rect x="16.4909%" y="709" width="3.2598%" height="15" fill="rgb(215,133,35)" fg:x="172" fg:w="34"/><text x="16.7409%" y="719.50">&lt;rs..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (34 samples, 3.26%)</title><rect x="16.4909%" y="693" width="3.2598%" height="15" fill="rgb(213,28,5)" fg:x="172" fg:w="34"/><text x="16.7409%" y="703.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (34 samples, 3.26%)</title><rect x="16.4909%" y="677" width="3.2598%" height="15" fill="rgb(215,77,49)" fg:x="172" fg:w="34"/><text x="16.7409%" y="687.50">all..</text></g><g><title>alloc::slice::hack::to_vec (34 samples, 3.26%)</title><rect x="16.4909%" y="661" width="3.2598%" height="15" fill="rgb(248,100,22)" fg:x="172" fg:w="34"/><text x="16.7409%" y="671.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (34 samples, 3.26%)</title><rect x="16.4909%" y="645" width="3.2598%" height="15" fill="rgb(208,67,9)" fg:x="172" fg:w="34"/><text x="16.7409%" y="655.50">&lt;T ..</text></g><g><title>&lt;rstar::node::RTreeNode&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 3.26%)</title><rect x="16.4909%" y="629" width="3.2598%" height="15" fill="rgb(219,133,21)" fg:x="172" fg:w="34"/><text x="16.7409%" y="639.50">&lt;rs..</text></g><g><title>&lt;rstar::node::ParentNode&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 3.26%)</title><rect x="16.4909%" y="613" width="3.2598%" height="15" fill="rgb(246,46,29)" fg:x="172" fg:w="34"/><text x="16.7409%" y="623.50">&lt;rs..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (34 samples, 3.26%)</title><rect x="16.4909%" y="597" width="3.2598%" height="15" fill="rgb(246,185,52)" fg:x="172" fg:w="34"/><text x="16.7409%" y="607.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (34 samples, 3.26%)</title><rect x="16.4909%" y="581" width="3.2598%" height="15" fill="rgb(252,136,11)" fg:x="172" fg:w="34"/><text x="16.7409%" y="591.50">all..</text></g><g><title>alloc::slice::hack::to_vec (34 samples, 3.26%)</title><rect x="16.4909%" y="565" width="3.2598%" height="15" fill="rgb(219,138,53)" fg:x="172" fg:w="34"/><text x="16.7409%" y="575.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (34 samples, 3.26%)</title><rect x="16.4909%" y="549" width="3.2598%" height="15" fill="rgb(211,51,23)" fg:x="172" fg:w="34"/><text x="16.7409%" y="559.50">&lt;T ..</text></g><g><title>&lt;rstar::node::RTreeNode&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 3.26%)</title><rect x="16.4909%" y="533" width="3.2598%" height="15" fill="rgb(247,221,28)" fg:x="172" fg:w="34"/><text x="16.7409%" y="543.50">&lt;rs..</text></g><g><title>&lt;rstar::node::ParentNode&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 3.26%)</title><rect x="16.4909%" y="517" width="3.2598%" height="15" fill="rgb(251,222,45)" fg:x="172" fg:w="34"/><text x="16.7409%" y="527.50">&lt;rs..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (34 samples, 3.26%)</title><rect x="16.4909%" y="501" width="3.2598%" height="15" fill="rgb(217,162,53)" fg:x="172" fg:w="34"/><text x="16.7409%" y="511.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (34 samples, 3.26%)</title><rect x="16.4909%" y="485" width="3.2598%" height="15" fill="rgb(229,93,14)" fg:x="172" fg:w="34"/><text x="16.7409%" y="495.50">all..</text></g><g><title>alloc::slice::hack::to_vec (34 samples, 3.26%)</title><rect x="16.4909%" y="469" width="3.2598%" height="15" fill="rgb(209,67,49)" fg:x="172" fg:w="34"/><text x="16.7409%" y="479.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (34 samples, 3.26%)</title><rect x="16.4909%" y="453" width="3.2598%" height="15" fill="rgb(213,87,29)" fg:x="172" fg:w="34"/><text x="16.7409%" y="463.50">&lt;T ..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.19%)</title><rect x="19.5590%" y="437" width="0.1918%" height="15" fill="rgb(205,151,52)" fg:x="204" fg:w="2"/><text x="19.8090%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.19%)</title><rect x="19.5590%" y="421" width="0.1918%" height="15" fill="rgb(253,215,39)" fg:x="204" fg:w="2"/><text x="19.8090%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.19%)</title><rect x="19.5590%" y="405" width="0.1918%" height="15" fill="rgb(221,220,41)" fg:x="204" fg:w="2"/><text x="19.8090%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.19%)</title><rect x="19.5590%" y="389" width="0.1918%" height="15" fill="rgb(218,133,21)" fg:x="204" fg:w="2"/><text x="19.8090%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.19%)</title><rect x="19.5590%" y="373" width="0.1918%" height="15" fill="rgb(221,193,43)" fg:x="204" fg:w="2"/><text x="19.8090%" y="383.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.19%)</title><rect x="19.5590%" y="357" width="0.1918%" height="15" fill="rgb(240,128,52)" fg:x="204" fg:w="2"/><text x="19.8090%" y="367.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.19%)</title><rect x="19.5590%" y="341" width="0.1918%" height="15" fill="rgb(253,114,12)" fg:x="204" fg:w="2"/><text x="19.8090%" y="351.50"></text></g><g><title>_int_malloc (2 samples, 0.19%)</title><rect x="19.5590%" y="325" width="0.1918%" height="15" fill="rgb(215,223,47)" fg:x="204" fg:w="2"/><text x="19.8090%" y="335.50"></text></g><g><title>&lt;rstar::rtree::RTree&lt;algo::spatial_filter::PointWithIndexReference&gt; as algo::spatial_filter::SpatialQuery&gt;::points_within_envelope (1 samples, 0.10%)</title><rect x="19.7507%" y="837" width="0.0959%" height="15" fill="rgb(248,225,23)" fg:x="206" fg:w="1"/><text x="20.0007%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.10%)</title><rect x="19.7507%" y="821" width="0.0959%" height="15" fill="rgb(250,108,0)" fg:x="206" fg:w="1"/><text x="20.0007%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="19.7507%" y="805" width="0.0959%" height="15" fill="rgb(228,208,7)" fg:x="206" fg:w="1"/><text x="20.0007%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="19.7507%" y="789" width="0.0959%" height="15" fill="rgb(244,45,10)" fg:x="206" fg:w="1"/><text x="20.0007%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="19.7507%" y="773" width="0.0959%" height="15" fill="rgb(207,125,25)" fg:x="206" fg:w="1"/><text x="20.0007%" y="783.50"></text></g><g><title>&lt;rstar::algorithm::iterators::SelectionIterator&lt;T,Func&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="19.7507%" y="757" width="0.0959%" height="15" fill="rgb(210,195,18)" fg:x="206" fg:w="1"/><text x="20.0007%" y="767.50"></text></g><g><title>&lt;rstar::algorithm::selection_functions::SelectInEnvelopeFunction&lt;T&gt; as rstar::algorithm::selection_functions::SelectionFunction&lt;T&gt;&gt;::should_unpack_parent (1 samples, 0.10%)</title><rect x="19.9425%" y="725" width="0.0959%" height="15" fill="rgb(249,80,12)" fg:x="208" fg:w="1"/><text x="20.1925%" y="735.50"></text></g><g><title>&lt;rstar::aabb::AABB&lt;P&gt; as rstar::envelope::Envelope&gt;::intersects (1 samples, 0.10%)</title><rect x="19.9425%" y="709" width="0.0959%" height="15" fill="rgb(221,65,9)" fg:x="208" fg:w="1"/><text x="20.1925%" y="719.50"></text></g><g><title>rstar::point::PointExt::all_component_wise (1 samples, 0.10%)</title><rect x="19.9425%" y="693" width="0.0959%" height="15" fill="rgb(235,49,36)" fg:x="208" fg:w="1"/><text x="20.1925%" y="703.50"></text></g><g><title>&lt;rstar::aabb::AABB&lt;P&gt; as rstar::envelope::Envelope&gt;::intersects::_{{closure}} (1 samples, 0.10%)</title><rect x="19.9425%" y="677" width="0.0959%" height="15" fill="rgb(225,32,20)" fg:x="208" fg:w="1"/><text x="20.1925%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::le (1 samples, 0.10%)</title><rect x="19.9425%" y="661" width="0.0959%" height="15" fill="rgb(215,141,46)" fg:x="208" fg:w="1"/><text x="20.1925%" y="671.50"></text></g><g><title>&lt;rstar::rtree::RTree&lt;algo::spatial_filter::PointWithIndexReference&gt; as algo::spatial_filter::SpatialQuery&gt;::points_within_envelope (3 samples, 0.29%)</title><rect x="19.8466%" y="821" width="0.2876%" height="15" fill="rgb(250,160,47)" fg:x="207" fg:w="3"/><text x="20.0966%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.29%)</title><rect x="19.8466%" y="805" width="0.2876%" height="15" fill="rgb(216,222,40)" fg:x="207" fg:w="3"/><text x="20.0966%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.29%)</title><rect x="19.8466%" y="789" width="0.2876%" height="15" fill="rgb(234,217,39)" fg:x="207" fg:w="3"/><text x="20.0966%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.29%)</title><rect x="19.8466%" y="773" width="0.2876%" height="15" fill="rgb(207,178,40)" fg:x="207" fg:w="3"/><text x="20.0966%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.19%)</title><rect x="19.9425%" y="757" width="0.1918%" height="15" fill="rgb(221,136,13)" fg:x="208" fg:w="2"/><text x="20.1925%" y="767.50"></text></g><g><title>&lt;rstar::algorithm::iterators::SelectionIterator&lt;T,Func&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.19%)</title><rect x="19.9425%" y="741" width="0.1918%" height="15" fill="rgb(249,199,10)" fg:x="208" fg:w="2"/><text x="20.1925%" y="751.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::pop (1 samples, 0.10%)</title><rect x="20.0384%" y="725" width="0.0959%" height="15" fill="rgb(249,222,13)" fg:x="209" fg:w="1"/><text x="20.2884%" y="735.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::triple_mut (1 samples, 0.10%)</title><rect x="20.0384%" y="709" width="0.0959%" height="15" fill="rgb(244,185,38)" fg:x="209" fg:w="1"/><text x="20.2884%" y="719.50"></text></g><g><title>smallvec::SmallVec&lt;A&gt;::spilled (1 samples, 0.10%)</title><rect x="20.0384%" y="693" width="0.0959%" height="15" fill="rgb(236,202,9)" fg:x="209" fg:w="1"/><text x="20.2884%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::_{{closure}} (2 samples, 0.19%)</title><rect x="20.1342%" y="469" width="0.1918%" height="15" fill="rgb(250,229,37)" fg:x="210" fg:w="2"/><text x="20.3842%" y="479.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorithm&lt;D&gt;&gt;::with_closure_and_param (5 samples, 0.48%)</title><rect x="20.3260%" y="245" width="0.4794%" height="15" fill="rgb(206,174,23)" fg:x="212" fg:w="5"/><text x="20.5760%" y="255.50"></text></g><g><title>&lt;core::iter::sources::from_fn::FromFn&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 1.34%)</title><rect x="20.3260%" y="261" width="1.3423%" height="15" fill="rgb(211,33,43)" fg:x="212" fg:w="14"/><text x="20.5760%" y="271.50"></text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::Restriction::iter::_{{closure}} (9 samples, 0.86%)</title><rect x="20.8054%" y="245" width="0.8629%" height="15" fill="rgb(245,58,50)" fg:x="217" fg:w="9"/><text x="21.0554%" y="255.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorithm&lt;D&gt;&gt;::with_closure_and_param (1 samples, 0.10%)</title><rect x="21.6683%" y="245" width="0.0959%" height="15" fill="rgb(244,68,36)" fg:x="226" fg:w="1"/><text x="21.9183%" y="255.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorithm&lt;D&gt;&gt;::with_closure_and_param (7 samples, 0.67%)</title><rect x="21.7641%" y="229" width="0.6711%" height="15" fill="rgb(232,229,15)" fg:x="227" fg:w="7"/><text x="22.0141%" y="239.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::utils::Matrix&lt;T&gt; as core::ops::index::IndexMut&lt;(usize,usize)&gt;&gt;::index_mut (15 samples, 1.44%)</title><rect x="22.4353%" y="229" width="1.4382%" height="15" fill="rgb(254,30,23)" fg:x="234" fg:w="15"/><text x="22.6853%" y="239.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorithm&lt;D&gt;&gt;::with_closure_and_param (6 samples, 0.58%)</title><rect x="23.8734%" y="213" width="0.5753%" height="15" fill="rgb(235,160,14)" fg:x="249" fg:w="6"/><text x="24.1234%" y="223.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorithm&lt;D&gt;&gt;::with_closure_and_param (4 samples, 0.38%)</title><rect x="25.1198%" y="149" width="0.3835%" height="15" fill="rgb(212,155,44)" fg:x="262" fg:w="4"/><text x="25.3698%" y="159.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::to_radians (6 samples, 0.58%)</title><rect x="34.4199%" y="117" width="0.5753%" height="15" fill="rgb(226,2,50)" fg:x="359" fg:w="6"/><text x="34.6699%" y="127.50"></text></g><g><title>haversine::distance (6 samples, 0.58%)</title><rect x="34.9952%" y="117" width="0.5753%" height="15" fill="rgb(234,177,6)" fg:x="365" fg:w="6"/><text x="35.2452%" y="127.50"></text></g><g><title>__atan2_finite@GLIBC_2.15@plt (2 samples, 0.19%)</title><rect x="38.5427%" y="85" width="0.1918%" height="15" fill="rgb(217,24,9)" fg:x="402" fg:w="2"/><text x="38.7927%" y="95.50"></text></g><g><title>libc_feholdsetround_sse_ctx (12 samples, 1.15%)</title><rect x="54.0748%" y="69" width="1.1505%" height="15" fill="rgb(220,13,46)" fg:x="564" fg:w="12"/><text x="54.3248%" y="79.50"></text></g><g><title>libc_feresetround_sse_ctx (5 samples, 0.48%)</title><rect x="55.2253%" y="69" width="0.4794%" height="15" fill="rgb(239,221,27)" fg:x="576" fg:w="5"/><text x="55.4753%" y="79.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::atan2 (213 samples, 20.42%)</title><rect x="35.5705%" y="117" width="20.4219%" height="15" fill="rgb(222,198,25)" fg:x="371" fg:w="213"/><text x="35.8205%" y="127.50">std::f64::&lt;impl f64&gt;::atan2</text></g><g><title>__atan2 (213 samples, 20.42%)</title><rect x="35.5705%" y="101" width="20.4219%" height="15" fill="rgb(211,99,13)" fg:x="371" fg:w="213"/><text x="35.8205%" y="111.50">__atan2</text></g><g><title>__ieee754_atan2_fma (180 samples, 17.26%)</title><rect x="38.7344%" y="85" width="17.2579%" height="15" fill="rgb(232,111,31)" fg:x="404" fg:w="180"/><text x="38.9844%" y="95.50">__ieee754_atan2_fma</text></g><g><title>signArctan2 (3 samples, 0.29%)</title><rect x="55.7047%" y="69" width="0.2876%" height="15" fill="rgb(245,82,37)" fg:x="581" fg:w="3"/><text x="55.9547%" y="79.50"></text></g><g><title>do_cos (64 samples, 6.14%)</title><rect x="58.5810%" y="85" width="6.1361%" height="15" fill="rgb(227,149,46)" fg:x="611" fg:w="64"/><text x="58.8310%" y="95.50">do_cos</text></g><g><title>libc_feholdsetround_sse_ctx (21 samples, 2.01%)</title><rect x="64.7172%" y="85" width="2.0134%" height="15" fill="rgb(218,36,50)" fg:x="675" fg:w="21"/><text x="64.9672%" y="95.50">l..</text></g><g><title>std::f64::&lt;impl f64&gt;::cos (120 samples, 11.51%)</title><rect x="55.9923%" y="117" width="11.5053%" height="15" fill="rgb(226,80,48)" fg:x="584" fg:w="120"/><text x="56.2423%" y="127.50">std::f64::&lt;impl f..</text></g><g><title>__cos_fma (120 samples, 11.51%)</title><rect x="55.9923%" y="101" width="11.5053%" height="15" fill="rgb(238,224,15)" fg:x="584" fg:w="120"/><text x="56.2423%" y="111.50">__cos_fma</text></g><g><title>libc_feresetround_sse_ctx (8 samples, 0.77%)</title><rect x="66.7306%" y="85" width="0.7670%" height="15" fill="rgb(241,136,10)" fg:x="696" fg:w="8"/><text x="66.9806%" y="95.50"></text></g><g><title>do_sin (76 samples, 7.29%)</title><rect x="70.0863%" y="85" width="7.2867%" height="15" fill="rgb(208,32,45)" fg:x="731" fg:w="76"/><text x="70.3363%" y="95.50">do_sin</text></g><g><title>std::f64::&lt;impl f64&gt;::sin (114 samples, 10.93%)</title><rect x="67.4976%" y="117" width="10.9300%" height="15" fill="rgb(207,135,9)" fg:x="704" fg:w="114"/><text x="67.7476%" y="127.50">std::f64::&lt;impl ..</text></g><g><title>__sin_fma (114 samples, 10.93%)</title><rect x="67.4976%" y="101" width="10.9300%" height="15" fill="rgb(206,86,44)" fg:x="704" fg:w="114"/><text x="67.7476%" y="111.50">__sin_fma</text></g><g><title>libc_feholdsetround_sse_ctx (11 samples, 1.05%)</title><rect x="77.3730%" y="85" width="1.0547%" height="15" fill="rgb(245,177,15)" fg:x="807" fg:w="11"/><text x="77.6230%" y="95.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorithm&lt;D&gt;&gt;::with_closure_and_param::_{{closure}} (634 samples, 60.79%)</title><rect x="25.0240%" y="197" width="60.7862%" height="15" fill="rgb(206,64,50)" fg:x="261" fg:w="634"/><text x="25.2740%" y="207.50">&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits..</text></g><g><title>core::ops::function::Fn::call (633 samples, 60.69%)</title><rect x="25.1198%" y="181" width="60.6903%" height="15" fill="rgb(234,36,40)" fg:x="262" fg:w="633"/><text x="25.3698%" y="191.50">core::ops::function::Fn::call</text></g><g><title>algo::rest::Point::distance (633 samples, 60.69%)</title><rect x="25.1198%" y="165" width="60.6903%" height="15" fill="rgb(213,64,8)" fg:x="262" fg:w="633"/><text x="25.3698%" y="175.50">algo::rest::Point::distance</text></g><g><title>algo::rest::Point::haversine (629 samples, 60.31%)</title><rect x="25.5034%" y="149" width="60.3068%" height="15" fill="rgb(210,75,36)" fg:x="266" fg:w="629"/><text x="25.7534%" y="159.50">algo::rest::Point::haversine</text></g><g><title>haversine::distance (592 samples, 56.76%)</title><rect x="29.0508%" y="133" width="56.7593%" height="15" fill="rgb(229,88,21)" fg:x="303" fg:w="592"/><text x="29.3008%" y="143.50">haversine::distance</text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (77 samples, 7.38%)</title><rect x="78.4276%" y="117" width="7.3826%" height="15" fill="rgb(252,204,47)" fg:x="818" fg:w="77"/><text x="78.6776%" y="127.50">std::f64::..</text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::Element&lt;T&gt; as core::ops::arith::Add&gt;::add (16 samples, 1.53%)</title><rect x="85.8102%" y="197" width="1.5340%" height="15" fill="rgb(208,77,27)" fg:x="895" fg:w="16"/><text x="86.0602%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (670 samples, 64.24%)</title><rect x="23.8734%" y="229" width="64.2378%" height="15" fill="rgb(221,76,26)" fg:x="249" fg:w="670"/><text x="24.1234%" y="239.50">core::option::Option&lt;T&gt;::map</text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::optimize_matrix::_{{closure}}::_{{closure}} (664 samples, 63.66%)</title><rect x="24.4487%" y="213" width="63.6625%" height="15" fill="rgb(225,139,18)" fg:x="255" fg:w="664"/><text x="24.6987%" y="223.50">dtw_rs_band_fork::algorithms::dynamic_programming::optimize_matrix::_{{closure}}::_{{closure}}</text></g><g><title>&lt;dtw_rs_band_fork::algorithms::utils::Matrix&lt;T&gt; as core::ops::index::Index&lt;(usize,usize)&gt;&gt;::index (8 samples, 0.77%)</title><rect x="87.3442%" y="197" width="0.7670%" height="15" fill="rgb(230,137,11)" fg:x="911" fg:w="8"/><text x="87.5942%" y="207.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::atan2 (2 samples, 0.19%)</title><rect x="88.3030%" y="117" width="0.1918%" height="15" fill="rgb(212,28,1)" fg:x="921" fg:w="2"/><text x="88.5530%" y="127.50"></text></g><g><title>__atan2 (2 samples, 0.19%)</title><rect x="88.3030%" y="101" width="0.1918%" height="15" fill="rgb(248,164,17)" fg:x="921" fg:w="2"/><text x="88.5530%" y="111.50"></text></g><g><title>__ieee754_atan2_fma (2 samples, 0.19%)</title><rect x="88.3030%" y="85" width="0.1918%" height="15" fill="rgb(222,171,42)" fg:x="921" fg:w="2"/><text x="88.5530%" y="95.50"></text></g><g><title>do_cos (2 samples, 0.19%)</title><rect x="88.5906%" y="85" width="0.1918%" height="15" fill="rgb(243,84,45)" fg:x="924" fg:w="2"/><text x="88.8406%" y="95.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (4 samples, 0.38%)</title><rect x="88.4947%" y="117" width="0.3835%" height="15" fill="rgb(252,49,23)" fg:x="923" fg:w="4"/><text x="88.7447%" y="127.50"></text></g><g><title>__cos_fma (4 samples, 0.38%)</title><rect x="88.4947%" y="101" width="0.3835%" height="15" fill="rgb(215,19,7)" fg:x="923" fg:w="4"/><text x="88.7447%" y="111.50"></text></g><g><title>libc_feholdsetround_sse_ctx (1 samples, 0.10%)</title><rect x="88.7824%" y="85" width="0.0959%" height="15" fill="rgb(238,81,41)" fg:x="926" fg:w="1"/><text x="89.0324%" y="95.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (9 samples, 0.86%)</title><rect x="88.1112%" y="229" width="0.8629%" height="15" fill="rgb(210,199,37)" fg:x="919" fg:w="9"/><text x="88.3612%" y="239.50"></text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::optimize_matrix::_{{closure}}::_{{closure}} (9 samples, 0.86%)</title><rect x="88.1112%" y="213" width="0.8629%" height="15" fill="rgb(244,192,49)" fg:x="919" fg:w="9"/><text x="88.3612%" y="223.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorithm&lt;D&gt;&gt;::with_closure_and_param::_{{closure}} (9 samples, 0.86%)</title><rect x="88.1112%" y="197" width="0.8629%" height="15" fill="rgb(226,211,11)" fg:x="919" fg:w="9"/><text x="88.3612%" y="207.50"></text></g><g><title>core::ops::function::Fn::call (9 samples, 0.86%)</title><rect x="88.1112%" y="181" width="0.8629%" height="15" fill="rgb(236,162,54)" fg:x="919" fg:w="9"/><text x="88.3612%" y="191.50"></text></g><g><title>algo::rest::Point::distance (9 samples, 0.86%)</title><rect x="88.1112%" y="165" width="0.8629%" height="15" fill="rgb(220,229,9)" fg:x="919" fg:w="9"/><text x="88.3612%" y="175.50"></text></g><g><title>algo::rest::Point::haversine (9 samples, 0.86%)</title><rect x="88.1112%" y="149" width="0.8629%" height="15" fill="rgb(250,87,22)" fg:x="919" fg:w="9"/><text x="88.3612%" y="159.50"></text></g><g><title>haversine::distance (9 samples, 0.86%)</title><rect x="88.1112%" y="133" width="0.8629%" height="15" fill="rgb(239,43,17)" fg:x="919" fg:w="9"/><text x="88.3612%" y="143.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sin (1 samples, 0.10%)</title><rect x="88.8782%" y="117" width="0.0959%" height="15" fill="rgb(231,177,25)" fg:x="927" fg:w="1"/><text x="89.1282%" y="127.50"></text></g><g><title>__sin_fma (1 samples, 0.10%)</title><rect x="88.8782%" y="101" width="0.0959%" height="15" fill="rgb(219,179,1)" fg:x="927" fg:w="1"/><text x="89.1282%" y="111.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorithm&lt;D&gt;&gt;::with_closure_and_param (2 samples, 0.19%)</title><rect x="89.8370%" y="213" width="0.1918%" height="15" fill="rgb(238,219,53)" fg:x="937" fg:w="2"/><text x="90.0870%" y="223.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::utils::Matrix&lt;T&gt; as core::ops::index::Index&lt;(usize,usize)&gt;&gt;::index (20 samples, 1.92%)</title><rect x="90.0288%" y="213" width="1.9175%" height="15" fill="rgb(232,167,36)" fg:x="939" fg:w="20"/><text x="90.2788%" y="223.50">&lt;..</text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::Restriction::contains (4 samples, 0.38%)</title><rect x="91.9463%" y="213" width="0.3835%" height="15" fill="rgb(244,19,51)" fg:x="959" fg:w="4"/><text x="92.1963%" y="223.50"></text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::Restriction::range (4 samples, 0.38%)</title><rect x="91.9463%" y="197" width="0.3835%" height="15" fill="rgb(224,6,22)" fg:x="959" fg:w="4"/><text x="92.1963%" y="207.50"></text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::optimize_matrix (765 samples, 73.35%)</title><rect x="20.3260%" y="325" width="73.3461%" height="15" fill="rgb(224,145,5)" fg:x="212" fg:w="765"/><text x="20.5760%" y="335.50">dtw_rs_band_fork::algorithms::dynamic_programming::optimize_matrix</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (765 samples, 73.35%)</title><rect x="20.3260%" y="309" width="73.3461%" height="15" fill="rgb(234,130,49)" fg:x="212" fg:w="765"/><text x="20.5760%" y="319.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (765 samples, 73.35%)</title><rect x="20.3260%" y="293" width="73.3461%" height="15" fill="rgb(254,6,2)" fg:x="212" fg:w="765"/><text x="20.5760%" y="303.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (765 samples, 73.35%)</title><rect x="20.3260%" y="277" width="73.3461%" height="15" fill="rgb(208,96,46)" fg:x="212" fg:w="765"/><text x="20.5760%" y="287.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (751 samples, 72.00%)</title><rect x="21.6683%" y="261" width="72.0038%" height="15" fill="rgb(239,3,39)" fg:x="226" fg:w="751"/><text x="21.9183%" y="271.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::optimize_matrix::_{{closure}} (750 samples, 71.91%)</title><rect x="21.7641%" y="245" width="71.9080%" height="15" fill="rgb(233,210,1)" fg:x="227" fg:w="750"/><text x="22.0141%" y="255.50">dtw_rs_band_fork::algorithms::dynamic_programming::optimize_matrix::_{{closure}}</text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::preceeding_cost (49 samples, 4.70%)</title><rect x="88.9741%" y="229" width="4.6980%" height="15" fill="rgb(244,137,37)" fg:x="928" fg:w="49"/><text x="89.2241%" y="239.50">dtw_r..</text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::arg_min (14 samples, 1.34%)</title><rect x="92.3298%" y="213" width="1.3423%" height="15" fill="rgb(240,136,2)" fg:x="963" fg:w="14"/><text x="92.5798%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (14 samples, 1.34%)</title><rect x="92.3298%" y="197" width="1.3423%" height="15" fill="rgb(239,18,37)" fg:x="963" fg:w="14"/><text x="92.5798%" y="207.50"></text></g><g><title>core::cmp::PartialOrd::gt (14 samples, 1.34%)</title><rect x="92.3298%" y="181" width="1.3423%" height="15" fill="rgb(218,185,22)" fg:x="963" fg:w="14"/><text x="92.5798%" y="191.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::Element&lt;T&gt; as core::cmp::PartialOrd&gt;::partial_cmp (14 samples, 1.34%)</title><rect x="92.3298%" y="165" width="1.3423%" height="15" fill="rgb(225,218,4)" fg:x="963" fg:w="14"/><text x="92.5798%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::partial_cmp (3 samples, 0.29%)</title><rect x="93.3845%" y="149" width="0.2876%" height="15" fill="rgb(230,182,32)" fg:x="974" fg:w="3"/><text x="93.6345%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (5 samples, 0.48%)</title><rect x="93.6721%" y="277" width="0.4794%" height="15" fill="rgb(242,56,43)" fg:x="977" fg:w="5"/><text x="93.9221%" y="287.50"></text></g><g><title>core::ptr::write (5 samples, 0.48%)</title><rect x="93.6721%" y="261" width="0.4794%" height="15" fill="rgb(233,99,24)" fg:x="977" fg:w="5"/><text x="93.9221%" y="271.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::Algorithm&lt;D&gt;&gt;::with_closure (771 samples, 73.92%)</title><rect x="20.3260%" y="357" width="73.9214%" height="15" fill="rgb(234,209,42)" fg:x="212" fg:w="771"/><text x="20.5760%" y="367.50">&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::Algorithm&lt;D&gt;&gt;::with_..</text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorithm&lt;D&gt;&gt;::with_closure_and_param (771 samples, 73.92%)</title><rect x="20.3260%" y="341" width="73.9214%" height="15" fill="rgb(227,7,12)" fg:x="212" fg:w="771"/><text x="20.5760%" y="351.50">&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorit..</text></g><g><title>dtw_rs_band_fork::algorithms::utils::Matrix&lt;T&gt;::fill (6 samples, 0.58%)</title><rect x="93.6721%" y="325" width="0.5753%" height="15" fill="rgb(245,203,43)" fg:x="977" fg:w="6"/><text x="93.9221%" y="335.50"></text></g><g><title>alloc::vec::from_elem (6 samples, 0.58%)</title><rect x="93.6721%" y="309" width="0.5753%" height="15" fill="rgb(238,205,33)" fg:x="977" fg:w="6"/><text x="93.9221%" y="319.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (6 samples, 0.58%)</title><rect x="93.6721%" y="293" width="0.5753%" height="15" fill="rgb(231,56,7)" fg:x="977" fg:w="6"/><text x="93.9221%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="94.1515%" y="277" width="0.0959%" height="15" fill="rgb(244,186,29)" fg:x="982" fg:w="1"/><text x="94.4015%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="94.1515%" y="261" width="0.0959%" height="15" fill="rgb(234,111,31)" fg:x="982" fg:w="1"/><text x="94.4015%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.10%)</title><rect x="94.1515%" y="245" width="0.0959%" height="15" fill="rgb(241,149,10)" fg:x="982" fg:w="1"/><text x="94.4015%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.10%)</title><rect x="94.1515%" y="229" width="0.0959%" height="15" fill="rgb(249,206,44)" fg:x="982" fg:w="1"/><text x="94.4015%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.10%)</title><rect x="94.1515%" y="213" width="0.0959%" height="15" fill="rgb(251,153,30)" fg:x="982" fg:w="1"/><text x="94.4015%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.10%)</title><rect x="94.1515%" y="197" width="0.0959%" height="15" fill="rgb(239,152,38)" fg:x="982" fg:w="1"/><text x="94.4015%" y="207.50"></text></g><g><title>algo::rest::greedy_mrt_search::_{{closure}}::_{{closure}} (772 samples, 74.02%)</title><rect x="20.3260%" y="405" width="74.0173%" height="15" fill="rgb(249,139,47)" fg:x="212" fg:w="772"/><text x="20.5760%" y="415.50">algo::rest::greedy_mrt_search::_{{closure}}::_{{closure}}</text></g><g><title>algo::rest::max_dtw (772 samples, 74.02%)</title><rect x="20.3260%" y="389" width="74.0173%" height="15" fill="rgb(244,64,35)" fg:x="212" fg:w="772"/><text x="20.5760%" y="399.50">algo::rest::max_dtw</text></g><g><title>algo::dtw_band::dtw (772 samples, 74.02%)</title><rect x="20.3260%" y="373" width="74.0173%" height="15" fill="rgb(216,46,15)" fg:x="212" fg:w="772"/><text x="20.5760%" y="383.50">algo::dtw_band::dtw</text></g><g><title>core::ptr::drop_in_place&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;f64&gt;&gt; (1 samples, 0.10%)</title><rect x="94.2474%" y="357" width="0.0959%" height="15" fill="rgb(250,74,19)" fg:x="983" fg:w="1"/><text x="94.4974%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;dtw_rs_band_fork::algorithms::utils::Matrix&lt;dtw_rs_band_fork::algorithms::dynamic_programming::Element&lt;f64&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="94.2474%" y="341" width="0.0959%" height="15" fill="rgb(249,42,33)" fg:x="983" fg:w="1"/><text x="94.4974%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[dtw_rs_band_fork::algorithms::dynamic_programming::Element&lt;f64&gt;]&gt;&gt; (1 samples, 0.10%)</title><rect x="94.2474%" y="325" width="0.0959%" height="15" fill="rgb(242,149,17)" fg:x="983" fg:w="1"/><text x="94.4974%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="94.2474%" y="309" width="0.0959%" height="15" fill="rgb(244,29,21)" fg:x="983" fg:w="1"/><text x="94.4974%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.10%)</title><rect x="94.2474%" y="293" width="0.0959%" height="15" fill="rgb(220,130,37)" fg:x="983" fg:w="1"/><text x="94.4974%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.10%)</title><rect x="94.2474%" y="277" width="0.0959%" height="15" fill="rgb(211,67,2)" fg:x="983" fg:w="1"/><text x="94.4974%" y="287.50"></text></g><g><title>__GI___libc_free (1 samples, 0.10%)</title><rect x="94.2474%" y="261" width="0.0959%" height="15" fill="rgb(235,68,52)" fg:x="983" fg:w="1"/><text x="94.4974%" y="271.50"></text></g><g><title>_int_free (1 samples, 0.10%)</title><rect x="94.2474%" y="245" width="0.0959%" height="15" fill="rgb(246,142,3)" fg:x="983" fg:w="1"/><text x="94.4974%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.38%)</title><rect x="94.3432%" y="325" width="0.3835%" height="15" fill="rgb(241,25,7)" fg:x="984" fg:w="4"/><text x="94.5932%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.38%)</title><rect x="94.3432%" y="309" width="0.3835%" height="15" fill="rgb(242,119,39)" fg:x="984" fg:w="4"/><text x="94.5932%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.38%)</title><rect x="94.3432%" y="293" width="0.3835%" height="15" fill="rgb(241,98,45)" fg:x="984" fg:w="4"/><text x="94.5932%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (4 samples, 0.38%)</title><rect x="94.3432%" y="277" width="0.3835%" height="15" fill="rgb(254,28,30)" fg:x="984" fg:w="4"/><text x="94.5932%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (4 samples, 0.38%)</title><rect x="94.3432%" y="261" width="0.3835%" height="15" fill="rgb(241,142,54)" fg:x="984" fg:w="4"/><text x="94.5932%" y="271.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.38%)</title><rect x="94.3432%" y="245" width="0.3835%" height="15" fill="rgb(222,85,15)" fg:x="984" fg:w="4"/><text x="94.5932%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.38%)</title><rect x="94.3432%" y="229" width="0.3835%" height="15" fill="rgb(210,85,47)" fg:x="984" fg:w="4"/><text x="94.5932%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.38%)</title><rect x="94.3432%" y="213" width="0.3835%" height="15" fill="rgb(224,206,25)" fg:x="984" fg:w="4"/><text x="94.5932%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.38%)</title><rect x="94.3432%" y="197" width="0.3835%" height="15" fill="rgb(243,201,19)" fg:x="984" fg:w="4"/><text x="94.5932%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.19%)</title><rect x="94.5350%" y="181" width="0.1918%" height="15" fill="rgb(236,59,4)" fg:x="986" fg:w="2"/><text x="94.7850%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (1 samples, 0.10%)</title><rect x="94.7267%" y="325" width="0.0959%" height="15" fill="rgb(254,179,45)" fg:x="988" fg:w="1"/><text x="94.9767%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.10%)</title><rect x="94.7267%" y="309" width="0.0959%" height="15" fill="rgb(226,14,10)" fg:x="988" fg:w="1"/><text x="94.9767%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.10%)</title><rect x="94.7267%" y="293" width="0.0959%" height="15" fill="rgb(244,27,41)" fg:x="988" fg:w="1"/><text x="94.9767%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.10%)</title><rect x="94.7267%" y="277" width="0.0959%" height="15" fill="rgb(235,35,32)" fg:x="988" fg:w="1"/><text x="94.9767%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.10%)</title><rect x="94.8226%" y="245" width="0.0959%" height="15" fill="rgb(218,68,31)" fg:x="989" fg:w="1"/><text x="95.0726%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.10%)</title><rect x="94.8226%" y="229" width="0.0959%" height="15" fill="rgb(207,120,37)" fg:x="989" fg:w="1"/><text x="95.0726%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.10%)</title><rect x="94.8226%" y="213" width="0.0959%" height="15" fill="rgb(227,98,0)" fg:x="989" fg:w="1"/><text x="95.0726%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.10%)</title><rect x="94.8226%" y="197" width="0.0959%" height="15" fill="rgb(207,7,3)" fg:x="989" fg:w="1"/><text x="95.0726%" y="207.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.10%)</title><rect x="94.8226%" y="181" width="0.0959%" height="15" fill="rgb(206,98,19)" fg:x="989" fg:w="1"/><text x="95.0726%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.10%)</title><rect x="94.9185%" y="213" width="0.0959%" height="15" fill="rgb(217,5,26)" fg:x="990" fg:w="1"/><text x="95.1685%" y="223.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.10%)</title><rect x="94.9185%" y="197" width="0.0959%" height="15" fill="rgb(235,190,38)" fg:x="990" fg:w="1"/><text x="95.1685%" y="207.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.10%)</title><rect x="94.9185%" y="181" width="0.0959%" height="15" fill="rgb(247,86,24)" fg:x="990" fg:w="1"/><text x="95.1685%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (782 samples, 74.98%)</title><rect x="20.1342%" y="693" width="74.9760%" height="15" fill="rgb(205,101,16)" fg:x="210" fg:w="782"/><text x="20.3842%" y="703.50">&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (782 samples, 74.98%)</title><rect x="20.1342%" y="677" width="74.9760%" height="15" fill="rgb(246,168,33)" fg:x="210" fg:w="782"/><text x="20.3842%" y="687.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold (782 samples, 74.98%)</title><rect x="20.1342%" y="661" width="74.9760%" height="15" fill="rgb(231,114,1)" fg:x="210" fg:w="782"/><text x="20.3842%" y="671.50">core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (782 samples, 74.98%)</title><rect x="20.1342%" y="645" width="74.9760%" height="15" fill="rgb(207,184,53)" fg:x="210" fg:w="782"/><text x="20.3842%" y="655.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (782 samples, 74.98%)</title><rect x="20.1342%" y="629" width="74.9760%" height="15" fill="rgb(224,95,51)" fg:x="210" fg:w="782"/><text x="20.3842%" y="639.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (782 samples, 74.98%)</title><rect x="20.1342%" y="613" width="74.9760%" height="15" fill="rgb(212,188,45)" fg:x="210" fg:w="782"/><text x="20.3842%" y="623.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (782 samples, 74.98%)</title><rect x="20.1342%" y="597" width="74.9760%" height="15" fill="rgb(223,154,38)" fg:x="210" fg:w="782"/><text x="20.3842%" y="607.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (782 samples, 74.98%)</title><rect x="20.1342%" y="581" width="74.9760%" height="15" fill="rgb(251,22,52)" fg:x="210" fg:w="782"/><text x="20.3842%" y="591.50">core::iter::adapters::filter::filter_fold::_{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (782 samples, 74.98%)</title><rect x="20.1342%" y="565" width="74.9760%" height="15" fill="rgb(229,209,22)" fg:x="210" fg:w="782"/><text x="20.3842%" y="575.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold::flatten::_{{closure}} (782 samples, 74.98%)</title><rect x="20.1342%" y="549" width="74.9760%" height="15" fill="rgb(234,138,34)" fg:x="210" fg:w="782"/><text x="20.3842%" y="559.50">core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold::flatten::_{{closure}}</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::_{{closure}} (782 samples, 74.98%)</title><rect x="20.1342%" y="533" width="74.9760%" height="15" fill="rgb(212,95,11)" fg:x="210" fg:w="782"/><text x="20.3842%" y="543.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::_{{closure}}</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (782 samples, 74.98%)</title><rect x="20.1342%" y="517" width="74.9760%" height="15" fill="rgb(240,179,47)" fg:x="210" fg:w="782"/><text x="20.3842%" y="527.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (782 samples, 74.98%)</title><rect x="20.1342%" y="501" width="74.9760%" height="15" fill="rgb(240,163,11)" fg:x="210" fg:w="782"/><text x="20.3842%" y="511.50">&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (782 samples, 74.98%)</title><rect x="20.1342%" y="485" width="74.9760%" height="15" fill="rgb(236,37,12)" fg:x="210" fg:w="782"/><text x="20.3842%" y="495.50">&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (780 samples, 74.78%)</title><rect x="20.3260%" y="469" width="74.7843%" height="15" fill="rgb(232,164,16)" fg:x="212" fg:w="780"/><text x="20.5760%" y="479.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}} (780 samples, 74.78%)</title><rect x="20.3260%" y="453" width="74.7843%" height="15" fill="rgb(244,205,15)" fg:x="212" fg:w="780"/><text x="20.5760%" y="463.50">core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::_{{closure}}</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (780 samples, 74.78%)</title><rect x="20.3260%" y="437" width="74.7843%" height="15" fill="rgb(223,117,47)" fg:x="212" fg:w="780"/><text x="20.5760%" y="447.50">&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}}</text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (780 samples, 74.78%)</title><rect x="20.3260%" y="421" width="74.7843%" height="15" fill="rgb(244,107,35)" fg:x="212" fg:w="780"/><text x="20.5760%" y="431.50">core::iter::adapters::filter::filter_fold::_{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (8 samples, 0.77%)</title><rect x="94.3432%" y="405" width="0.7670%" height="15" fill="rgb(205,140,8)" fg:x="984" fg:w="8"/><text x="94.5932%" y="415.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (8 samples, 0.77%)</title><rect x="94.3432%" y="389" width="0.7670%" height="15" fill="rgb(228,84,46)" fg:x="984" fg:w="8"/><text x="94.5932%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (8 samples, 0.77%)</title><rect x="94.3432%" y="373" width="0.7670%" height="15" fill="rgb(254,188,9)" fg:x="984" fg:w="8"/><text x="94.5932%" y="383.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (8 samples, 0.77%)</title><rect x="94.3432%" y="357" width="0.7670%" height="15" fill="rgb(206,112,54)" fg:x="984" fg:w="8"/><text x="94.5932%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.77%)</title><rect x="94.3432%" y="341" width="0.7670%" height="15" fill="rgb(216,84,49)" fg:x="984" fg:w="8"/><text x="94.5932%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3 samples, 0.29%)</title><rect x="94.8226%" y="325" width="0.2876%" height="15" fill="rgb(214,194,35)" fg:x="989" fg:w="3"/><text x="95.0726%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.29%)</title><rect x="94.8226%" y="309" width="0.2876%" height="15" fill="rgb(249,28,3)" fg:x="989" fg:w="3"/><text x="95.0726%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.29%)</title><rect x="94.8226%" y="293" width="0.2876%" height="15" fill="rgb(222,56,52)" fg:x="989" fg:w="3"/><text x="95.0726%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (3 samples, 0.29%)</title><rect x="94.8226%" y="277" width="0.2876%" height="15" fill="rgb(245,217,50)" fg:x="989" fg:w="3"/><text x="95.0726%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (3 samples, 0.29%)</title><rect x="94.8226%" y="261" width="0.2876%" height="15" fill="rgb(213,201,24)" fg:x="989" fg:w="3"/><text x="95.0726%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (2 samples, 0.19%)</title><rect x="94.9185%" y="245" width="0.1918%" height="15" fill="rgb(248,116,28)" fg:x="990" fg:w="2"/><text x="95.1685%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (2 samples, 0.19%)</title><rect x="94.9185%" y="229" width="0.1918%" height="15" fill="rgb(219,72,43)" fg:x="990" fg:w="2"/><text x="95.1685%" y="239.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.10%)</title><rect x="95.0144%" y="213" width="0.0959%" height="15" fill="rgb(209,138,14)" fg:x="991" fg:w="1"/><text x="95.2644%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (1 samples, 0.10%)</title><rect x="95.0144%" y="197" width="0.0959%" height="15" fill="rgb(222,18,33)" fg:x="991" fg:w="1"/><text x="95.2644%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (1 samples, 0.10%)</title><rect x="95.0144%" y="181" width="0.0959%" height="15" fill="rgb(213,199,7)" fg:x="991" fg:w="1"/><text x="95.2644%" y="191.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::atan2 (5 samples, 0.48%)</title><rect x="95.2061%" y="341" width="0.4794%" height="15" fill="rgb(250,110,10)" fg:x="993" fg:w="5"/><text x="95.4561%" y="351.50"></text></g><g><title>__atan2 (5 samples, 0.48%)</title><rect x="95.2061%" y="325" width="0.4794%" height="15" fill="rgb(248,123,6)" fg:x="993" fg:w="5"/><text x="95.4561%" y="335.50"></text></g><g><title>__ieee754_atan2_fma (3 samples, 0.29%)</title><rect x="95.3979%" y="309" width="0.2876%" height="15" fill="rgb(206,91,31)" fg:x="995" fg:w="3"/><text x="95.6479%" y="319.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (3 samples, 0.29%)</title><rect x="95.6855%" y="341" width="0.2876%" height="15" fill="rgb(211,154,13)" fg:x="998" fg:w="3"/><text x="95.9355%" y="351.50"></text></g><g><title>__cos_fma (3 samples, 0.29%)</title><rect x="95.6855%" y="325" width="0.2876%" height="15" fill="rgb(225,148,7)" fg:x="998" fg:w="3"/><text x="95.9355%" y="335.50"></text></g><g><title>do_cos (3 samples, 0.29%)</title><rect x="95.6855%" y="309" width="0.2876%" height="15" fill="rgb(220,160,43)" fg:x="998" fg:w="3"/><text x="95.9355%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (792 samples, 75.93%)</title><rect x="20.1342%" y="805" width="75.9348%" height="15" fill="rgb(213,52,39)" fg:x="210" fg:w="792"/><text x="20.3842%" y="815.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (792 samples, 75.93%)</title><rect x="20.1342%" y="789" width="75.9348%" height="15" fill="rgb(243,137,7)" fg:x="210" fg:w="792"/><text x="20.3842%" y="799.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (792 samples, 75.93%)</title><rect x="20.1342%" y="773" width="75.9348%" height="15" fill="rgb(230,79,13)" fg:x="210" fg:w="792"/><text x="20.3842%" y="783.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (792 samples, 75.93%)</title><rect x="20.1342%" y="757" width="75.9348%" height="15" fill="rgb(247,105,23)" fg:x="210" fg:w="792"/><text x="20.3842%" y="767.50">&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (792 samples, 75.93%)</title><rect x="20.1342%" y="741" width="75.9348%" height="15" fill="rgb(223,179,41)" fg:x="210" fg:w="792"/><text x="20.3842%" y="751.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (792 samples, 75.93%)</title><rect x="20.1342%" y="725" width="75.9348%" height="15" fill="rgb(218,9,34)" fg:x="210" fg:w="792"/><text x="20.3842%" y="735.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (792 samples, 75.93%)</title><rect x="20.1342%" y="709" width="75.9348%" height="15" fill="rgb(222,106,8)" fg:x="210" fg:w="792"/><text x="20.3842%" y="719.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.96%)</title><rect x="95.1103%" y="693" width="0.9588%" height="15" fill="rgb(211,220,0)" fg:x="992" fg:w="10"/><text x="95.3603%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.96%)</title><rect x="95.1103%" y="677" width="0.9588%" height="15" fill="rgb(229,52,16)" fg:x="992" fg:w="10"/><text x="95.3603%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10 samples, 0.96%)</title><rect x="95.1103%" y="661" width="0.9588%" height="15" fill="rgb(212,155,18)" fg:x="992" fg:w="10"/><text x="95.3603%" y="671.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (10 samples, 0.96%)</title><rect x="95.1103%" y="645" width="0.9588%" height="15" fill="rgb(242,21,14)" fg:x="992" fg:w="10"/><text x="95.3603%" y="655.50"></text></g><g><title>algo::rest::greedy_mrt_search::_{{closure}} (10 samples, 0.96%)</title><rect x="95.1103%" y="629" width="0.9588%" height="15" fill="rgb(222,19,48)" fg:x="992" fg:w="10"/><text x="95.3603%" y="639.50"></text></g><g><title>algo::rest::max_dtw (10 samples, 0.96%)</title><rect x="95.1103%" y="613" width="0.9588%" height="15" fill="rgb(232,45,27)" fg:x="992" fg:w="10"/><text x="95.3603%" y="623.50"></text></g><g><title>algo::dtw_band::dtw (10 samples, 0.96%)</title><rect x="95.1103%" y="597" width="0.9588%" height="15" fill="rgb(249,103,42)" fg:x="992" fg:w="10"/><text x="95.3603%" y="607.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::Algorithm&lt;D&gt;&gt;::with_closure (10 samples, 0.96%)</title><rect x="95.1103%" y="581" width="0.9588%" height="15" fill="rgb(246,81,33)" fg:x="992" fg:w="10"/><text x="95.3603%" y="591.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorithm&lt;D&gt;&gt;::with_closure_and_param (10 samples, 0.96%)</title><rect x="95.1103%" y="565" width="0.9588%" height="15" fill="rgb(252,33,42)" fg:x="992" fg:w="10"/><text x="95.3603%" y="575.50"></text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::optimize_matrix (10 samples, 0.96%)</title><rect x="95.1103%" y="549" width="0.9588%" height="15" fill="rgb(209,212,41)" fg:x="992" fg:w="10"/><text x="95.3603%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10 samples, 0.96%)</title><rect x="95.1103%" y="533" width="0.9588%" height="15" fill="rgb(207,154,6)" fg:x="992" fg:w="10"/><text x="95.3603%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.96%)</title><rect x="95.1103%" y="517" width="0.9588%" height="15" fill="rgb(223,64,47)" fg:x="992" fg:w="10"/><text x="95.3603%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10 samples, 0.96%)</title><rect x="95.1103%" y="501" width="0.9588%" height="15" fill="rgb(211,161,38)" fg:x="992" fg:w="10"/><text x="95.3603%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (10 samples, 0.96%)</title><rect x="95.1103%" y="485" width="0.9588%" height="15" fill="rgb(219,138,40)" fg:x="992" fg:w="10"/><text x="95.3603%" y="495.50"></text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::optimize_matrix::_{{closure}} (10 samples, 0.96%)</title><rect x="95.1103%" y="469" width="0.9588%" height="15" fill="rgb(241,228,46)" fg:x="992" fg:w="10"/><text x="95.3603%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10 samples, 0.96%)</title><rect x="95.1103%" y="453" width="0.9588%" height="15" fill="rgb(223,209,38)" fg:x="992" fg:w="10"/><text x="95.3603%" y="463.50"></text></g><g><title>dtw_rs_band_fork::algorithms::dynamic_programming::optimize_matrix::_{{closure}}::_{{closure}} (10 samples, 0.96%)</title><rect x="95.1103%" y="437" width="0.9588%" height="15" fill="rgb(236,164,45)" fg:x="992" fg:w="10"/><text x="95.3603%" y="447.50"></text></g><g><title>&lt;dtw_rs_band_fork::algorithms::dynamic_programming::DynamicTimeWarping&lt;D&gt; as dtw_rs_band_fork::traits::ParameterizedAlgorithm&lt;D&gt;&gt;::with_closure_and_param::_{{closure}} (10 samples, 0.96%)</title><rect x="95.1103%" y="421" width="0.9588%" height="15" fill="rgb(231,15,5)" fg:x="992" fg:w="10"/><text x="95.3603%" y="431.50"></text></g><g><title>core::ops::function::Fn::call (10 samples, 0.96%)</title><rect x="95.1103%" y="405" width="0.9588%" height="15" fill="rgb(252,35,15)" fg:x="992" fg:w="10"/><text x="95.3603%" y="415.50"></text></g><g><title>algo::rest::Point::distance (10 samples, 0.96%)</title><rect x="95.1103%" y="389" width="0.9588%" height="15" fill="rgb(248,181,18)" fg:x="992" fg:w="10"/><text x="95.3603%" y="399.50"></text></g><g><title>algo::rest::Point::haversine (10 samples, 0.96%)</title><rect x="95.1103%" y="373" width="0.9588%" height="15" fill="rgb(233,39,42)" fg:x="992" fg:w="10"/><text x="95.3603%" y="383.50"></text></g><g><title>haversine::distance (10 samples, 0.96%)</title><rect x="95.1103%" y="357" width="0.9588%" height="15" fill="rgb(238,110,33)" fg:x="992" fg:w="10"/><text x="95.3603%" y="367.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (1 samples, 0.10%)</title><rect x="95.9732%" y="341" width="0.0959%" height="15" fill="rgb(233,195,10)" fg:x="1001" fg:w="1"/><text x="96.2232%" y="351.50"></text></g><g><title>algo::rest::greedy_mrt_search (793 samples, 76.03%)</title><rect x="20.1342%" y="821" width="76.0307%" height="15" fill="rgb(254,105,3)" fg:x="210" fg:w="793"/><text x="20.3842%" y="831.50">algo::rest::greedy_mrt_search</text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.10%)</title><rect x="96.0690%" y="805" width="0.0959%" height="15" fill="rgb(221,225,9)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="815.50"></text></g><g><title>algo::rest::greedy_mrt_search::_{{closure}} (1 samples, 0.10%)</title><rect x="96.0690%" y="789" width="0.0959%" height="15" fill="rgb(224,227,45)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="799.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.10%)</title><rect x="96.0690%" y="773" width="0.0959%" height="15" fill="rgb(229,198,43)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="783.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.10%)</title><rect x="96.0690%" y="757" width="0.0959%" height="15" fill="rgb(206,209,35)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1 samples, 0.10%)</title><rect x="96.0690%" y="741" width="0.0959%" height="15" fill="rgb(245,195,53)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="96.0690%" y="725" width="0.0959%" height="15" fill="rgb(240,92,26)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.10%)</title><rect x="96.0690%" y="709" width="0.0959%" height="15" fill="rgb(207,40,23)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.10%)</title><rect x="96.0690%" y="693" width="0.0959%" height="15" fill="rgb(223,111,35)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 0.10%)</title><rect x="96.0690%" y="677" width="0.0959%" height="15" fill="rgb(229,147,28)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.10%)</title><rect x="96.0690%" y="661" width="0.0959%" height="15" fill="rgb(211,29,28)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.10%)</title><rect x="96.0690%" y="645" width="0.0959%" height="15" fill="rgb(228,72,33)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.10%)</title><rect x="96.0690%" y="629" width="0.0959%" height="15" fill="rgb(205,214,31)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="639.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.10%)</title><rect x="96.0690%" y="613" width="0.0959%" height="15" fill="rgb(224,111,15)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="623.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.10%)</title><rect x="96.0690%" y="597" width="0.0959%" height="15" fill="rgb(253,21,26)" fg:x="1002" fg:w="1"/><text x="96.3190%" y="607.50"></text></g><g><title>algo::rest::encode (797 samples, 76.41%)</title><rect x="19.8466%" y="837" width="76.4142%" height="15" fill="rgb(245,139,43)" fg:x="207" fg:w="797"/><text x="20.0966%" y="847.50">algo::rest::encode</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.10%)</title><rect x="96.1649%" y="821" width="0.0959%" height="15" fill="rgb(252,170,7)" fg:x="1003" fg:w="1"/><text x="96.4149%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.10%)</title><rect x="96.1649%" y="805" width="0.0959%" height="15" fill="rgb(231,118,14)" fg:x="1003" fg:w="1"/><text x="96.4149%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.10%)</title><rect x="96.1649%" y="789" width="0.0959%" height="15" fill="rgb(238,83,0)" fg:x="1003" fg:w="1"/><text x="96.4149%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.10%)</title><rect x="96.1649%" y="773" width="0.0959%" height="15" fill="rgb(221,39,39)" fg:x="1003" fg:w="1"/><text x="96.4149%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="96.1649%" y="757" width="0.0959%" height="15" fill="rgb(222,119,46)" fg:x="1003" fg:w="1"/><text x="96.4149%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="96.1649%" y="741" width="0.0959%" height="15" fill="rgb(222,165,49)" fg:x="1003" fg:w="1"/><text x="96.4149%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.10%)</title><rect x="96.1649%" y="725" width="0.0959%" height="15" fill="rgb(219,113,52)" fg:x="1003" fg:w="1"/><text x="96.4149%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.10%)</title><rect x="96.1649%" y="709" width="0.0959%" height="15" fill="rgb(214,7,15)" fg:x="1003" fg:w="1"/><text x="96.4149%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.10%)</title><rect x="96.1649%" y="693" width="0.0959%" height="15" fill="rgb(235,32,4)" fg:x="1003" fg:w="1"/><text x="96.4149%" y="703.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.10%)</title><rect x="96.1649%" y="677" width="0.0959%" height="15" fill="rgb(238,90,54)" fg:x="1003" fg:w="1"/><text x="96.4149%" y="687.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="96.1649%" y="661" width="0.0959%" height="15" fill="rgb(213,208,19)" fg:x="1003" fg:w="1"/><text x="96.4149%" y="671.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="96.1649%" y="645" width="0.0959%" height="15" fill="rgb(233,156,4)" fg:x="1003" fg:w="1"/><text x="96.4149%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(algo::rest::EncodedTrajectory,f64)&gt; (1 samples, 0.10%)</title><rect x="96.2608%" y="837" width="0.0959%" height="15" fill="rgb(207,194,5)" fg:x="1004" fg:w="1"/><text x="96.5108%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;algo::rest::EncodedTrajectory&gt; (1 samples, 0.10%)</title><rect x="96.2608%" y="821" width="0.0959%" height="15" fill="rgb(206,111,30)" fg:x="1004" fg:w="1"/><text x="96.5108%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;algo::rest::SubTrajectory&gt;&gt; (1 samples, 0.10%)</title><rect x="96.2608%" y="805" width="0.0959%" height="15" fill="rgb(243,70,54)" fg:x="1004" fg:w="1"/><text x="96.5108%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="96.2608%" y="789" width="0.0959%" height="15" fill="rgb(242,28,8)" fg:x="1004" fg:w="1"/><text x="96.5108%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;[algo::rest::SubTrajectory]&gt; (1 samples, 0.10%)</title><rect x="96.2608%" y="773" width="0.0959%" height="15" fill="rgb(219,106,18)" fg:x="1004" fg:w="1"/><text x="96.5108%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;algo::rest::SubTrajectory&gt; (1 samples, 0.10%)</title><rect x="96.2608%" y="757" width="0.0959%" height="15" fill="rgb(244,222,10)" fg:x="1004" fg:w="1"/><text x="96.5108%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;algo::rest::Point&gt;&gt; (1 samples, 0.10%)</title><rect x="96.2608%" y="741" width="0.0959%" height="15" fill="rgb(236,179,52)" fg:x="1004" fg:w="1"/><text x="96.5108%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;algo::rest::Point&gt;&gt; (1 samples, 0.10%)</title><rect x="96.2608%" y="725" width="0.0959%" height="15" fill="rgb(213,23,39)" fg:x="1004" fg:w="1"/><text x="96.5108%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="96.2608%" y="709" width="0.0959%" height="15" fill="rgb(238,48,10)" fg:x="1004" fg:w="1"/><text x="96.5108%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.10%)</title><rect x="96.2608%" y="693" width="0.0959%" height="15" fill="rgb(251,196,23)" fg:x="1004" fg:w="1"/><text x="96.5108%" y="703.50"></text></g><g><title>algo::algorithm::rest_main (1 samples, 0.10%)</title><rect x="96.2608%" y="677" width="0.0959%" height="15" fill="rgb(250,152,24)" fg:x="1004" fg:w="1"/><text x="96.5108%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.19%)</title><rect x="97.0278%" y="309" width="0.1918%" height="15" fill="rgb(209,150,17)" fg:x="1012" fg:w="2"/><text x="97.2778%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;]&gt; (2 samples, 0.19%)</title><rect x="97.0278%" y="293" width="0.1918%" height="15" fill="rgb(234,202,34)" fg:x="1012" fg:w="2"/><text x="97.2778%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (2 samples, 0.19%)</title><rect x="97.0278%" y="277" width="0.1918%" height="15" fill="rgb(253,148,53)" fg:x="1012" fg:w="2"/><text x="97.2778%" y="287.50"></text></g><g><title>__GI___libc_free (3 samples, 0.29%)</title><rect x="97.3154%" y="245" width="0.2876%" height="15" fill="rgb(218,129,16)" fg:x="1015" fg:w="3"/><text x="97.5654%" y="255.50"></text></g><g><title>_int_free (2 samples, 0.19%)</title><rect x="97.4113%" y="229" width="0.1918%" height="15" fill="rgb(216,85,19)" fg:x="1016" fg:w="2"/><text x="97.6613%" y="239.50"></text></g><g><title>unlink_chunk (1 samples, 0.10%)</title><rect x="97.5072%" y="213" width="0.0959%" height="15" fill="rgb(235,228,7)" fg:x="1017" fg:w="1"/><text x="97.7572%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 1.15%)</title><rect x="96.5484%" y="389" width="1.1505%" height="15" fill="rgb(245,175,0)" fg:x="1007" fg:w="12"/><text x="96.7984%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;]&gt; (12 samples, 1.15%)</title><rect x="96.5484%" y="373" width="1.1505%" height="15" fill="rgb(208,168,36)" fg:x="1007" fg:w="12"/><text x="96.7984%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (11 samples, 1.05%)</title><rect x="96.6443%" y="357" width="1.0547%" height="15" fill="rgb(246,171,24)" fg:x="1008" fg:w="11"/><text x="96.8943%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::ParentNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (7 samples, 0.67%)</title><rect x="97.0278%" y="341" width="0.6711%" height="15" fill="rgb(215,142,24)" fg:x="1012" fg:w="7"/><text x="97.2778%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt;&gt; (7 samples, 0.67%)</title><rect x="97.0278%" y="325" width="0.6711%" height="15" fill="rgb(250,187,7)" fg:x="1012" fg:w="7"/><text x="97.2778%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt;&gt; (5 samples, 0.48%)</title><rect x="97.2196%" y="309" width="0.4794%" height="15" fill="rgb(228,66,33)" fg:x="1014" fg:w="5"/><text x="97.4696%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.48%)</title><rect x="97.2196%" y="293" width="0.4794%" height="15" fill="rgb(234,215,21)" fg:x="1014" fg:w="5"/><text x="97.4696%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.38%)</title><rect x="97.3154%" y="277" width="0.3835%" height="15" fill="rgb(222,191,20)" fg:x="1015" fg:w="4"/><text x="97.5654%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.38%)</title><rect x="97.3154%" y="261" width="0.3835%" height="15" fill="rgb(245,79,54)" fg:x="1015" fg:w="4"/><text x="97.5654%" y="271.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.10%)</title><rect x="97.6031%" y="245" width="0.0959%" height="15" fill="rgb(240,10,37)" fg:x="1018" fg:w="1"/><text x="97.8531%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 1.92%)</title><rect x="96.4525%" y="469" width="1.9175%" height="15" fill="rgb(214,192,32)" fg:x="1006" fg:w="20"/><text x="96.7025%" y="479.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;]&gt; (20 samples, 1.92%)</title><rect x="96.4525%" y="453" width="1.9175%" height="15" fill="rgb(209,36,54)" fg:x="1006" fg:w="20"/><text x="96.7025%" y="463.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (20 samples, 1.92%)</title><rect x="96.4525%" y="437" width="1.9175%" height="15" fill="rgb(220,10,11)" fg:x="1006" fg:w="20"/><text x="96.7025%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::ParentNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (19 samples, 1.82%)</title><rect x="96.5484%" y="421" width="1.8217%" height="15" fill="rgb(221,106,17)" fg:x="1007" fg:w="19"/><text x="96.7984%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt;&gt; (19 samples, 1.82%)</title><rect x="96.5484%" y="405" width="1.8217%" height="15" fill="rgb(251,142,44)" fg:x="1007" fg:w="19"/><text x="96.7984%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt;&gt; (7 samples, 0.67%)</title><rect x="97.6989%" y="389" width="0.6711%" height="15" fill="rgb(238,13,15)" fg:x="1019" fg:w="7"/><text x="97.9489%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.67%)</title><rect x="97.6989%" y="373" width="0.6711%" height="15" fill="rgb(208,107,27)" fg:x="1019" fg:w="7"/><text x="97.9489%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.67%)</title><rect x="97.6989%" y="357" width="0.6711%" height="15" fill="rgb(205,136,37)" fg:x="1019" fg:w="7"/><text x="97.9489%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.67%)</title><rect x="97.6989%" y="341" width="0.6711%" height="15" fill="rgb(250,205,27)" fg:x="1019" fg:w="7"/><text x="97.9489%" y="351.50"></text></g><g><title>__GI___libc_free (7 samples, 0.67%)</title><rect x="97.6989%" y="325" width="0.6711%" height="15" fill="rgb(210,80,43)" fg:x="1019" fg:w="7"/><text x="97.9489%" y="335.50"></text></g><g><title>_int_free (6 samples, 0.58%)</title><rect x="97.7948%" y="309" width="0.5753%" height="15" fill="rgb(247,160,36)" fg:x="1020" fg:w="6"/><text x="98.0448%" y="319.50"></text></g><g><title>unlink_chunk (1 samples, 0.10%)</title><rect x="98.2742%" y="293" width="0.0959%" height="15" fill="rgb(234,13,49)" fg:x="1025" fg:w="1"/><text x="98.5242%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 2.01%)</title><rect x="96.4525%" y="549" width="2.0134%" height="15" fill="rgb(234,122,0)" fg:x="1006" fg:w="21"/><text x="96.7025%" y="559.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;]&gt; (21 samples, 2.01%)</title><rect x="96.4525%" y="533" width="2.0134%" height="15" fill="rgb(207,146,38)" fg:x="1006" fg:w="21"/><text x="96.7025%" y="543.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (21 samples, 2.01%)</title><rect x="96.4525%" y="517" width="2.0134%" height="15" fill="rgb(207,177,25)" fg:x="1006" fg:w="21"/><text x="96.7025%" y="527.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::ParentNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (21 samples, 2.01%)</title><rect x="96.4525%" y="501" width="2.0134%" height="15" fill="rgb(211,178,42)" fg:x="1006" fg:w="21"/><text x="96.7025%" y="511.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt;&gt; (21 samples, 2.01%)</title><rect x="96.4525%" y="485" width="2.0134%" height="15" fill="rgb(230,69,54)" fg:x="1006" fg:w="21"/><text x="96.7025%" y="495.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="98.3701%" y="469" width="0.0959%" height="15" fill="rgb(214,135,41)" fg:x="1026" fg:w="1"/><text x="98.6201%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="98.3701%" y="453" width="0.0959%" height="15" fill="rgb(237,67,25)" fg:x="1026" fg:w="1"/><text x="98.6201%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.10%)</title><rect x="98.3701%" y="437" width="0.0959%" height="15" fill="rgb(222,189,50)" fg:x="1026" fg:w="1"/><text x="98.6201%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.10%)</title><rect x="98.3701%" y="421" width="0.0959%" height="15" fill="rgb(245,148,34)" fg:x="1026" fg:w="1"/><text x="98.6201%" y="431.50"></text></g><g><title>__GI___libc_free (1 samples, 0.10%)</title><rect x="98.3701%" y="405" width="0.0959%" height="15" fill="rgb(222,29,6)" fg:x="1026" fg:w="1"/><text x="98.6201%" y="415.50"></text></g><g><title>_int_free (1 samples, 0.10%)</title><rect x="98.3701%" y="389" width="0.0959%" height="15" fill="rgb(221,189,43)" fg:x="1026" fg:w="1"/><text x="98.6201%" y="399.50"></text></g><g><title>unlink_chunk (1 samples, 0.10%)</title><rect x="98.3701%" y="373" width="0.0959%" height="15" fill="rgb(207,36,27)" fg:x="1026" fg:w="1"/><text x="98.6201%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;rstar::rtree::RTree&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (23 samples, 2.21%)</title><rect x="96.3567%" y="837" width="2.2052%" height="15" fill="rgb(217,90,24)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="847.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::ParentNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (23 samples, 2.21%)</title><rect x="96.3567%" y="821" width="2.2052%" height="15" fill="rgb(224,66,35)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="831.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt;&gt; (23 samples, 2.21%)</title><rect x="96.3567%" y="805" width="2.2052%" height="15" fill="rgb(221,13,50)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="815.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 2.21%)</title><rect x="96.3567%" y="789" width="2.2052%" height="15" fill="rgb(236,68,49)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="799.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;]&gt; (23 samples, 2.21%)</title><rect x="96.3567%" y="773" width="2.2052%" height="15" fill="rgb(229,146,28)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="783.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (23 samples, 2.21%)</title><rect x="96.3567%" y="757" width="2.2052%" height="15" fill="rgb(225,31,38)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="767.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::ParentNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (23 samples, 2.21%)</title><rect x="96.3567%" y="741" width="2.2052%" height="15" fill="rgb(250,208,3)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="751.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt;&gt; (23 samples, 2.21%)</title><rect x="96.3567%" y="725" width="2.2052%" height="15" fill="rgb(246,54,23)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="735.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 2.21%)</title><rect x="96.3567%" y="709" width="2.2052%" height="15" fill="rgb(243,76,11)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="719.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;]&gt; (23 samples, 2.21%)</title><rect x="96.3567%" y="693" width="2.2052%" height="15" fill="rgb(245,21,50)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="703.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (23 samples, 2.21%)</title><rect x="96.3567%" y="677" width="2.2052%" height="15" fill="rgb(228,9,43)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="687.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::ParentNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (23 samples, 2.21%)</title><rect x="96.3567%" y="661" width="2.2052%" height="15" fill="rgb(208,100,47)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="671.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt;&gt; (23 samples, 2.21%)</title><rect x="96.3567%" y="645" width="2.2052%" height="15" fill="rgb(232,26,8)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="655.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 2.21%)</title><rect x="96.3567%" y="629" width="2.2052%" height="15" fill="rgb(216,166,38)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="639.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;]&gt; (23 samples, 2.21%)</title><rect x="96.3567%" y="613" width="2.2052%" height="15" fill="rgb(251,202,51)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="623.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (23 samples, 2.21%)</title><rect x="96.3567%" y="597" width="2.2052%" height="15" fill="rgb(254,216,34)" fg:x="1005" fg:w="23"/><text x="96.6067%" y="607.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rstar::node::ParentNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt; (22 samples, 2.11%)</title><rect x="96.4525%" y="581" width="2.1093%" height="15" fill="rgb(251,32,27)" fg:x="1006" fg:w="22"/><text x="96.7025%" y="591.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt;&gt; (22 samples, 2.11%)</title><rect x="96.4525%" y="565" width="2.1093%" height="15" fill="rgb(208,127,28)" fg:x="1006" fg:w="22"/><text x="96.7025%" y="575.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="98.4660%" y="549" width="0.0959%" height="15" fill="rgb(224,137,22)" fg:x="1027" fg:w="1"/><text x="98.7160%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="98.4660%" y="533" width="0.0959%" height="15" fill="rgb(254,70,32)" fg:x="1027" fg:w="1"/><text x="98.7160%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.10%)</title><rect x="98.4660%" y="517" width="0.0959%" height="15" fill="rgb(229,75,37)" fg:x="1027" fg:w="1"/><text x="98.7160%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.10%)</title><rect x="98.4660%" y="501" width="0.0959%" height="15" fill="rgb(252,64,23)" fg:x="1027" fg:w="1"/><text x="98.7160%" y="511.50"></text></g><g><title>__GI___libc_free (1 samples, 0.10%)</title><rect x="98.4660%" y="485" width="0.0959%" height="15" fill="rgb(232,162,48)" fg:x="1027" fg:w="1"/><text x="98.7160%" y="495.50"></text></g><g><title>_int_free (1 samples, 0.10%)</title><rect x="98.4660%" y="469" width="0.0959%" height="15" fill="rgb(246,160,12)" fg:x="1027" fg:w="1"/><text x="98.7160%" y="479.50"></text></g><g><title>itertools::Itertools::collect_vec (3 samples, 0.29%)</title><rect x="98.5618%" y="837" width="0.2876%" height="15" fill="rgb(247,166,0)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.29%)</title><rect x="98.5618%" y="821" width="0.2876%" height="15" fill="rgb(249,219,21)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.29%)</title><rect x="98.5618%" y="805" width="0.2876%" height="15" fill="rgb(205,209,3)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.29%)</title><rect x="98.5618%" y="789" width="0.2876%" height="15" fill="rgb(243,44,1)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.29%)</title><rect x="98.5618%" y="773" width="0.2876%" height="15" fill="rgb(206,159,16)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.29%)</title><rect x="98.5618%" y="757" width="0.2876%" height="15" fill="rgb(244,77,30)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.29%)</title><rect x="98.5618%" y="741" width="0.2876%" height="15" fill="rgb(218,69,12)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.29%)</title><rect x="98.5618%" y="725" width="0.2876%" height="15" fill="rgb(212,87,7)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.29%)</title><rect x="98.5618%" y="709" width="0.2876%" height="15" fill="rgb(245,114,25)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.29%)</title><rect x="98.5618%" y="693" width="0.2876%" height="15" fill="rgb(210,61,42)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.29%)</title><rect x="98.5618%" y="677" width="0.2876%" height="15" fill="rgb(211,52,33)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="687.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.29%)</title><rect x="98.5618%" y="661" width="0.2876%" height="15" fill="rgb(234,58,33)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="671.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.29%)</title><rect x="98.5618%" y="645" width="0.2876%" height="15" fill="rgb(220,115,36)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="655.50"></text></g><g><title>_int_malloc (3 samples, 0.29%)</title><rect x="98.5618%" y="629" width="0.2876%" height="15" fill="rgb(243,153,54)" fg:x="1028" fg:w="3"/><text x="98.8118%" y="639.50"></text></g><g><title>malloc_consolidate (2 samples, 0.19%)</title><rect x="98.6577%" y="613" width="0.1918%" height="15" fill="rgb(251,47,18)" fg:x="1029" fg:w="2"/><text x="98.9077%" y="623.50"></text></g><g><title>unlink_chunk (1 samples, 0.10%)</title><rect x="98.7536%" y="597" width="0.0959%" height="15" fill="rgb(242,102,42)" fg:x="1030" fg:w="1"/><text x="99.0036%" y="607.50"></text></g><g><title>rstar::algorithm::rstar::choose_subtree (1 samples, 0.10%)</title><rect x="98.8495%" y="789" width="0.0959%" height="15" fill="rgb(234,31,38)" fg:x="1031" fg:w="1"/><text x="99.0995%" y="799.50"></text></g><g><title>&lt;rstar::aabb::AABB&lt;P&gt; as rstar::envelope::Envelope&gt;::contains_envelope (1 samples, 0.10%)</title><rect x="98.8495%" y="773" width="0.0959%" height="15" fill="rgb(221,117,51)" fg:x="1031" fg:w="1"/><text x="99.0995%" y="783.50"></text></g><g><title>rstar::point::PointExt::all_component_wise (1 samples, 0.10%)</title><rect x="98.8495%" y="757" width="0.0959%" height="15" fill="rgb(212,20,18)" fg:x="1031" fg:w="1"/><text x="99.0995%" y="767.50"></text></g><g><title>&lt;rstar::aabb::AABB&lt;P&gt; as rstar::envelope::Envelope&gt;::contains_envelope::_{{closure}} (1 samples, 0.10%)</title><rect x="98.8495%" y="741" width="0.0959%" height="15" fill="rgb(245,133,36)" fg:x="1031" fg:w="1"/><text x="99.0995%" y="751.50"></text></g><g><title>rstar::algorithm::rstar::choose_subtree (1 samples, 0.10%)</title><rect x="98.8495%" y="725" width="0.0959%" height="15" fill="rgb(212,6,19)" fg:x="1031" fg:w="1"/><text x="99.0995%" y="735.50"></text></g><g><title>rstar::algorithm::rstar::choose_subtree (1 samples, 0.10%)</title><rect x="98.9453%" y="773" width="0.0959%" height="15" fill="rgb(218,1,36)" fg:x="1032" fg:w="1"/><text x="99.1953%" y="783.50"></text></g><g><title>&lt;rstar::aabb::AABB&lt;P&gt; as rstar::envelope::Envelope&gt;::merge (1 samples, 0.10%)</title><rect x="99.0412%" y="709" width="0.0959%" height="15" fill="rgb(246,84,54)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="719.50"></text></g><g><title>rstar::point::PointExt::min_point (1 samples, 0.10%)</title><rect x="99.0412%" y="693" width="0.0959%" height="15" fill="rgb(242,110,6)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="703.50"></text></g><g><title>rstar::point::PointExt::component_wise (1 samples, 0.10%)</title><rect x="99.0412%" y="677" width="0.0959%" height="15" fill="rgb(214,47,5)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="687.50"></text></g><g><title>&lt;[S: N] as rstar::point::Point&gt;::generate (1 samples, 0.10%)</title><rect x="99.0412%" y="661" width="0.0959%" height="15" fill="rgb(218,159,25)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="671.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (1 samples, 0.10%)</title><rect x="99.0412%" y="645" width="0.0959%" height="15" fill="rgb(215,211,28)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="655.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (1 samples, 0.10%)</title><rect x="99.0412%" y="629" width="0.0959%" height="15" fill="rgb(238,59,32)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="639.50"></text></g><g><title>core::array::drain::drain_array_with (1 samples, 0.10%)</title><rect x="99.0412%" y="613" width="0.0959%" height="15" fill="rgb(226,82,3)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="623.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map::_{{closure}} (1 samples, 0.10%)</title><rect x="99.0412%" y="597" width="0.0959%" height="15" fill="rgb(240,164,32)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="607.50"></text></g><g><title>core::array::try_from_trusted_iterator (1 samples, 0.10%)</title><rect x="99.0412%" y="581" width="0.0959%" height="15" fill="rgb(232,46,7)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="591.50"></text></g><g><title>core::array::try_from_fn (1 samples, 0.10%)</title><rect x="99.0412%" y="565" width="0.0959%" height="15" fill="rgb(229,129,53)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="575.50"></text></g><g><title>core::array::try_from_fn_erased (1 samples, 0.10%)</title><rect x="99.0412%" y="549" width="0.0959%" height="15" fill="rgb(234,188,29)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="559.50"></text></g><g><title>core::array::try_from_trusted_iterator::next::_{{closure}} (1 samples, 0.10%)</title><rect x="99.0412%" y="533" width="0.0959%" height="15" fill="rgb(246,141,4)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1 samples, 0.10%)</title><rect x="99.0412%" y="517" width="0.0959%" height="15" fill="rgb(229,23,39)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="527.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_1::_{{closure}} (1 samples, 0.10%)</title><rect x="99.0412%" y="501" width="0.0959%" height="15" fill="rgb(206,12,3)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="511.50"></text></g><g><title>&lt;[S: N] as rstar::point::Point&gt;::generate::_{{closure}} (1 samples, 0.10%)</title><rect x="99.0412%" y="485" width="0.0959%" height="15" fill="rgb(252,226,20)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="495.50"></text></g><g><title>rstar::point::PointExt::component_wise::_{{closure}} (1 samples, 0.10%)</title><rect x="99.0412%" y="469" width="0.0959%" height="15" fill="rgb(216,123,35)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.10%)</title><rect x="99.0412%" y="453" width="0.0959%" height="15" fill="rgb(212,68,40)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="463.50"></text></g><g><title>rstar::point::min_inline (1 samples, 0.10%)</title><rect x="99.0412%" y="437" width="0.0959%" height="15" fill="rgb(254,125,32)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (1 samples, 0.10%)</title><rect x="99.0412%" y="421" width="0.0959%" height="15" fill="rgb(253,97,22)" fg:x="1033" fg:w="1"/><text x="99.2912%" y="431.50"></text></g><g><title>rstar::algorithm::rstar::choose_subtree (1 samples, 0.10%)</title><rect x="99.1371%" y="709" width="0.0959%" height="15" fill="rgb(241,101,14)" fg:x="1034" fg:w="1"/><text x="99.3871%" y="719.50"></text></g><g><title>rstar::algorithm::rstar::forced_insertion (5 samples, 0.48%)</title><rect x="98.8495%" y="805" width="0.4794%" height="15" fill="rgb(238,103,29)" fg:x="1031" fg:w="5"/><text x="99.0995%" y="815.50"></text></g><g><title>rstar::algorithm::rstar::forced_insertion (4 samples, 0.38%)</title><rect x="98.9453%" y="789" width="0.3835%" height="15" fill="rgb(233,195,47)" fg:x="1032" fg:w="4"/><text x="99.1953%" y="799.50"></text></g><g><title>rstar::algorithm::rstar::forced_insertion (3 samples, 0.29%)</title><rect x="99.0412%" y="773" width="0.2876%" height="15" fill="rgb(246,218,30)" fg:x="1033" fg:w="3"/><text x="99.2912%" y="783.50"></text></g><g><title>rstar::algorithm::rstar::forced_insertion (3 samples, 0.29%)</title><rect x="99.0412%" y="757" width="0.2876%" height="15" fill="rgb(219,145,47)" fg:x="1033" fg:w="3"/><text x="99.2912%" y="767.50"></text></g><g><title>rstar::algorithm::rstar::forced_insertion (3 samples, 0.29%)</title><rect x="99.0412%" y="741" width="0.2876%" height="15" fill="rgb(243,12,26)" fg:x="1033" fg:w="3"/><text x="99.2912%" y="751.50"></text></g><g><title>rstar::algorithm::rstar::forced_insertion (3 samples, 0.29%)</title><rect x="99.0412%" y="725" width="0.2876%" height="15" fill="rgb(214,87,16)" fg:x="1033" fg:w="3"/><text x="99.2912%" y="735.50"></text></g><g><title>rstar::algorithm::rstar::resolve_overflow_without_reinsertion (1 samples, 0.10%)</title><rect x="99.2330%" y="709" width="0.0959%" height="15" fill="rgb(208,99,42)" fg:x="1035" fg:w="1"/><text x="99.4830%" y="719.50"></text></g><g><title>rstar::algorithm::rstar::split (1 samples, 0.10%)</title><rect x="99.2330%" y="693" width="0.0959%" height="15" fill="rgb(253,99,2)" fg:x="1035" fg:w="1"/><text x="99.4830%" y="703.50"></text></g><g><title>rstar::algorithm::rstar::get_split_axis (1 samples, 0.10%)</title><rect x="99.2330%" y="677" width="0.0959%" height="15" fill="rgb(220,168,23)" fg:x="1035" fg:w="1"/><text x="99.4830%" y="687.50"></text></g><g><title>&lt;rstar::aabb::AABB&lt;P&gt; as rstar::envelope::Envelope&gt;::sort_envelopes (1 samples, 0.10%)</title><rect x="99.2330%" y="661" width="0.0959%" height="15" fill="rgb(242,38,24)" fg:x="1035" fg:w="1"/><text x="99.4830%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (1 samples, 0.10%)</title><rect x="99.2330%" y="645" width="0.0959%" height="15" fill="rgb(225,182,9)" fg:x="1035" fg:w="1"/><text x="99.4830%" y="655.50"></text></g><g><title>alloc::slice::stable_sort (1 samples, 0.10%)</title><rect x="99.2330%" y="629" width="0.0959%" height="15" fill="rgb(243,178,37)" fg:x="1035" fg:w="1"/><text x="99.4830%" y="639.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.10%)</title><rect x="99.2330%" y="613" width="0.0959%" height="15" fill="rgb(232,139,19)" fg:x="1035" fg:w="1"/><text x="99.4830%" y="623.50"></text></g><g><title>core::slice::sort::insert_tail (1 samples, 0.10%)</title><rect x="99.2330%" y="597" width="0.0959%" height="15" fill="rgb(225,201,24)" fg:x="1035" fg:w="1"/><text x="99.4830%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::InsertionHole&lt;rstar::node::RTreeNode&lt;algo::spatial_filter::PointWithIndexReference&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="99.2330%" y="581" width="0.0959%" height="15" fill="rgb(221,47,46)" fg:x="1035" fg:w="1"/><text x="99.4830%" y="591.50"></text></g><g><title>&lt;core::slice::sort::InsertionHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="99.2330%" y="565" width="0.0959%" height="15" fill="rgb(249,23,13)" fg:x="1035" fg:w="1"/><text x="99.4830%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.10%)</title><rect x="99.2330%" y="549" width="0.0959%" height="15" fill="rgb(219,9,5)" fg:x="1035" fg:w="1"/><text x="99.4830%" y="559.50"></text></g><g><title>rstar::algorithm::rstar::choose_subtree (2 samples, 0.19%)</title><rect x="99.3289%" y="741" width="0.1918%" height="15" fill="rgb(254,171,16)" fg:x="1036" fg:w="2"/><text x="99.5789%" y="751.50"></text></g><g><title>&lt;rstar::node::RTreeNode&lt;T&gt; as rstar::object::RTreeObject&gt;::envelope (1 samples, 0.10%)</title><rect x="99.4247%" y="725" width="0.0959%" height="15" fill="rgb(230,171,20)" fg:x="1037" fg:w="1"/><text x="99.6747%" y="735.50"></text></g><g><title>rstar::algorithm::rstar::recursive_insert (1 samples, 0.10%)</title><rect x="99.5206%" y="725" width="0.0959%" height="15" fill="rgb(210,71,41)" fg:x="1038" fg:w="1"/><text x="99.7706%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.10%)</title><rect x="99.5206%" y="709" width="0.0959%" height="15" fill="rgb(206,173,20)" fg:x="1038" fg:w="1"/><text x="99.7706%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.10%)</title><rect x="99.5206%" y="693" width="0.0959%" height="15" fill="rgb(233,88,34)" fg:x="1038" fg:w="1"/><text x="99.7706%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.10%)</title><rect x="99.5206%" y="677" width="0.0959%" height="15" fill="rgb(223,209,46)" fg:x="1038" fg:w="1"/><text x="99.7706%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="99.5206%" y="661" width="0.0959%" height="15" fill="rgb(250,43,18)" fg:x="1038" fg:w="1"/><text x="99.7706%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.10%)</title><rect x="99.5206%" y="645" width="0.0959%" height="15" fill="rgb(208,13,10)" fg:x="1038" fg:w="1"/><text x="99.7706%" y="655.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.10%)</title><rect x="99.5206%" y="629" width="0.0959%" height="15" fill="rgb(212,200,36)" fg:x="1038" fg:w="1"/><text x="99.7706%" y="639.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.10%)</title><rect x="99.5206%" y="613" width="0.0959%" height="15" fill="rgb(225,90,30)" fg:x="1038" fg:w="1"/><text x="99.7706%" y="623.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.10%)</title><rect x="99.5206%" y="597" width="0.0959%" height="15" fill="rgb(236,182,39)" fg:x="1038" fg:w="1"/><text x="99.7706%" y="607.50"></text></g><g><title>_int_realloc (1 samples, 0.10%)</title><rect x="99.5206%" y="581" width="0.0959%" height="15" fill="rgb(212,144,35)" fg:x="1038" fg:w="1"/><text x="99.7706%" y="591.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="99.5206%" y="565" width="0.0959%" height="15" fill="rgb(228,63,44)" fg:x="1038" fg:w="1"/><text x="99.7706%" y="575.50"></text></g><g><title>rstar::algorithm::rstar::resolve_overflow (1 samples, 0.10%)</title><rect x="99.6165%" y="725" width="0.0959%" height="15" fill="rgb(228,109,6)" fg:x="1039" fg:w="1"/><text x="99.8665%" y="735.50"></text></g><g><title>rstar::algorithm::rstar::get_nodes_for_reinsertion (1 samples, 0.10%)</title><rect x="99.6165%" y="709" width="0.0959%" height="15" fill="rgb(238,117,24)" fg:x="1039" fg:w="1"/><text x="99.8665%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (1 samples, 0.10%)</title><rect x="99.6165%" y="693" width="0.0959%" height="15" fill="rgb(242,26,26)" fg:x="1039" fg:w="1"/><text x="99.8665%" y="703.50"></text></g><g><title>alloc::slice::stable_sort (1 samples, 0.10%)</title><rect x="99.6165%" y="677" width="0.0959%" height="15" fill="rgb(221,92,48)" fg:x="1039" fg:w="1"/><text x="99.8665%" y="687.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.10%)</title><rect x="99.6165%" y="661" width="0.0959%" height="15" fill="rgb(209,209,32)" fg:x="1039" fg:w="1"/><text x="99.8665%" y="671.50"></text></g><g><title>core::slice::sort::insert_tail (1 samples, 0.10%)</title><rect x="99.6165%" y="645" width="0.0959%" height="15" fill="rgb(221,70,22)" fg:x="1039" fg:w="1"/><text x="99.8665%" y="655.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (1 samples, 0.10%)</title><rect x="99.6165%" y="629" width="0.0959%" height="15" fill="rgb(248,145,5)" fg:x="1039" fg:w="1"/><text x="99.8665%" y="639.50"></text></g><g><title>rstar::algorithm::rstar::get_nodes_for_reinsertion::_{{closure}} (1 samples, 0.10%)</title><rect x="99.6165%" y="613" width="0.0959%" height="15" fill="rgb(226,116,26)" fg:x="1039" fg:w="1"/><text x="99.8665%" y="623.50"></text></g><g><title>rstar::point::PointExt::length_2 (1 samples, 0.10%)</title><rect x="99.6165%" y="597" width="0.0959%" height="15" fill="rgb(244,5,17)" fg:x="1039" fg:w="1"/><text x="99.8665%" y="607.50"></text></g><g><title>rstar::point::PointExt::fold (1 samples, 0.10%)</title><rect x="99.6165%" y="581" width="0.0959%" height="15" fill="rgb(252,159,33)" fg:x="1039" fg:w="1"/><text x="99.8665%" y="591.50"></text></g><g><title>rstar::point::PointExt::length_2::_{{closure}} (1 samples, 0.10%)</title><rect x="99.6165%" y="565" width="0.0959%" height="15" fill="rgb(206,71,0)" fg:x="1039" fg:w="1"/><text x="99.8665%" y="575.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (1 samples, 0.10%)</title><rect x="99.6165%" y="549" width="0.0959%" height="15" fill="rgb(233,118,54)" fg:x="1039" fg:w="1"/><text x="99.8665%" y="559.50"></text></g><g><title>rstar::rtree::RTree&lt;T,Params&gt;::insert (10 samples, 0.96%)</title><rect x="98.8495%" y="837" width="0.9588%" height="15" fill="rgb(234,83,48)" fg:x="1031" fg:w="10"/><text x="99.0995%" y="847.50"></text></g><g><title>&lt;rstar::algorithm::rstar::RStarInsertionStrategy as rstar::params::InsertionStrategy&gt;::insert (10 samples, 0.96%)</title><rect x="98.8495%" y="821" width="0.9588%" height="15" fill="rgb(228,3,54)" fg:x="1031" fg:w="10"/><text x="99.0995%" y="831.50"></text></g><g><title>rstar::algorithm::rstar::recursive_insert (5 samples, 0.48%)</title><rect x="99.3289%" y="805" width="0.4794%" height="15" fill="rgb(226,155,13)" fg:x="1036" fg:w="5"/><text x="99.5789%" y="815.50"></text></g><g><title>rstar::algorithm::rstar::recursive_insert (5 samples, 0.48%)</title><rect x="99.3289%" y="789" width="0.4794%" height="15" fill="rgb(241,28,37)" fg:x="1036" fg:w="5"/><text x="99.5789%" y="799.50"></text></g><g><title>rstar::algorithm::rstar::recursive_insert (5 samples, 0.48%)</title><rect x="99.3289%" y="773" width="0.4794%" height="15" fill="rgb(233,93,10)" fg:x="1036" fg:w="5"/><text x="99.5789%" y="783.50"></text></g><g><title>rstar::algorithm::rstar::recursive_insert (5 samples, 0.48%)</title><rect x="99.3289%" y="757" width="0.4794%" height="15" fill="rgb(225,113,19)" fg:x="1036" fg:w="5"/><text x="99.5789%" y="767.50"></text></g><g><title>rstar::algorithm::rstar::recursive_insert (3 samples, 0.29%)</title><rect x="99.5206%" y="741" width="0.2876%" height="15" fill="rgb(241,2,18)" fg:x="1038" fg:w="3"/><text x="99.7706%" y="751.50"></text></g><g><title>rstar::node::envelope_for_children (1 samples, 0.10%)</title><rect x="99.7124%" y="725" width="0.0959%" height="15" fill="rgb(228,207,21)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="735.50"></text></g><g><title>&lt;rstar::aabb::AABB&lt;P&gt; as rstar::envelope::Envelope&gt;::merge (1 samples, 0.10%)</title><rect x="99.7124%" y="709" width="0.0959%" height="15" fill="rgb(213,211,35)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="719.50"></text></g><g><title>rstar::point::PointExt::min_point (1 samples, 0.10%)</title><rect x="99.7124%" y="693" width="0.0959%" height="15" fill="rgb(209,83,10)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="703.50"></text></g><g><title>rstar::point::PointExt::component_wise (1 samples, 0.10%)</title><rect x="99.7124%" y="677" width="0.0959%" height="15" fill="rgb(209,164,1)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="687.50"></text></g><g><title>&lt;[S: N] as rstar::point::Point&gt;::generate (1 samples, 0.10%)</title><rect x="99.7124%" y="661" width="0.0959%" height="15" fill="rgb(213,184,43)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="671.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::map (1 samples, 0.10%)</title><rect x="99.7124%" y="645" width="0.0959%" height="15" fill="rgb(231,61,34)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="655.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map (1 samples, 0.10%)</title><rect x="99.7124%" y="629" width="0.0959%" height="15" fill="rgb(235,75,3)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="639.50"></text></g><g><title>core::array::drain::drain_array_with (1 samples, 0.10%)</title><rect x="99.7124%" y="613" width="0.0959%" height="15" fill="rgb(220,106,47)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="623.50"></text></g><g><title>core::array::_&lt;impl [T: N]&gt;::try_map::_{{closure}} (1 samples, 0.10%)</title><rect x="99.7124%" y="597" width="0.0959%" height="15" fill="rgb(210,196,33)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="607.50"></text></g><g><title>core::array::try_from_trusted_iterator (1 samples, 0.10%)</title><rect x="99.7124%" y="581" width="0.0959%" height="15" fill="rgb(229,154,42)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="591.50"></text></g><g><title>core::array::try_from_fn (1 samples, 0.10%)</title><rect x="99.7124%" y="565" width="0.0959%" height="15" fill="rgb(228,114,26)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="575.50"></text></g><g><title>core::array::try_from_fn_erased (1 samples, 0.10%)</title><rect x="99.7124%" y="549" width="0.0959%" height="15" fill="rgb(208,144,1)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="559.50"></text></g><g><title>core::array::try_from_trusted_iterator::next::_{{closure}} (1 samples, 0.10%)</title><rect x="99.7124%" y="533" width="0.0959%" height="15" fill="rgb(239,112,37)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1 samples, 0.10%)</title><rect x="99.7124%" y="517" width="0.0959%" height="15" fill="rgb(210,96,50)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="527.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_1::_{{closure}} (1 samples, 0.10%)</title><rect x="99.7124%" y="501" width="0.0959%" height="15" fill="rgb(222,178,2)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="511.50"></text></g><g><title>&lt;[S: N] as rstar::point::Point&gt;::generate::_{{closure}} (1 samples, 0.10%)</title><rect x="99.7124%" y="485" width="0.0959%" height="15" fill="rgb(226,74,18)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="495.50"></text></g><g><title>rstar::point::PointExt::component_wise::_{{closure}} (1 samples, 0.10%)</title><rect x="99.7124%" y="469" width="0.0959%" height="15" fill="rgb(225,67,54)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.10%)</title><rect x="99.7124%" y="453" width="0.0959%" height="15" fill="rgb(251,92,32)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="463.50"></text></g><g><title>rstar::point::min_inline (1 samples, 0.10%)</title><rect x="99.7124%" y="437" width="0.0959%" height="15" fill="rgb(228,149,22)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (1 samples, 0.10%)</title><rect x="99.7124%" y="421" width="0.0959%" height="15" fill="rgb(243,54,13)" fg:x="1040" fg:w="1"/><text x="99.9624%" y="431.50"></text></g><g><title>__libc_start_main_impl (957 samples, 91.75%)</title><rect x="8.1496%" y="1061" width="91.7546%" height="15" fill="rgb(243,180,28)" fg:x="85" fg:w="957"/><text x="8.3996%" y="1071.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (957 samples, 91.75%)</title><rect x="8.1496%" y="1045" width="91.7546%" height="15" fill="rgb(208,167,24)" fg:x="85" fg:w="957"/><text x="8.3996%" y="1055.50">__libc_start_call_main</text></g><g><title>std::rt::lang_start (957 samples, 91.75%)</title><rect x="8.1496%" y="1029" width="91.7546%" height="15" fill="rgb(245,73,45)" fg:x="85" fg:w="957"/><text x="8.3996%" y="1039.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (957 samples, 91.75%)</title><rect x="8.1496%" y="1013" width="91.7546%" height="15" fill="rgb(237,203,48)" fg:x="85" fg:w="957"/><text x="8.3996%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (957 samples, 91.75%)</title><rect x="8.1496%" y="997" width="91.7546%" height="15" fill="rgb(211,197,16)" fg:x="85" fg:w="957"/><text x="8.3996%" y="1007.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (957 samples, 91.75%)</title><rect x="8.1496%" y="981" width="91.7546%" height="15" fill="rgb(243,99,51)" fg:x="85" fg:w="957"/><text x="8.3996%" y="991.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (957 samples, 91.75%)</title><rect x="8.1496%" y="965" width="91.7546%" height="15" fill="rgb(215,123,29)" fg:x="85" fg:w="957"/><text x="8.3996%" y="975.50">core::ops::function::FnOnce::call_once</text></g><g><title>algo::main (957 samples, 91.75%)</title><rect x="8.1496%" y="949" width="91.7546%" height="15" fill="rgb(239,186,37)" fg:x="85" fg:w="957"/><text x="8.3996%" y="959.50">algo::main</text></g><g><title>algo::run_config (957 samples, 91.75%)</title><rect x="8.1496%" y="933" width="91.7546%" height="15" fill="rgb(252,136,39)" fg:x="85" fg:w="957"/><text x="8.3996%" y="943.50">algo::run_config</text></g><g><title>algo::algorithm::rest_main (957 samples, 91.75%)</title><rect x="8.1496%" y="917" width="91.7546%" height="15" fill="rgb(223,213,32)" fg:x="85" fg:w="957"/><text x="8.3996%" y="927.50">algo::algorithm::rest_main</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (871 samples, 83.51%)</title><rect x="16.3950%" y="901" width="83.5091%" height="15" fill="rgb(233,115,5)" fg:x="171" fg:w="871"/><text x="16.6450%" y="911.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (871 samples, 83.51%)</title><rect x="16.3950%" y="885" width="83.5091%" height="15" fill="rgb(207,226,44)" fg:x="171" fg:w="871"/><text x="16.6450%" y="895.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (871 samples, 83.51%)</title><rect x="16.3950%" y="869" width="83.5091%" height="15" fill="rgb(208,126,0)" fg:x="171" fg:w="871"/><text x="16.6450%" y="879.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>algo::algorithm::rest_main::_{{closure}} (871 samples, 83.51%)</title><rect x="16.3950%" y="853" width="83.5091%" height="15" fill="rgb(244,66,21)" fg:x="171" fg:w="871"/><text x="16.6450%" y="863.50">algo::algorithm::rest_main::_{{closure}}</text></g><g><title>std::io::Write::write_fmt (1 samples, 0.10%)</title><rect x="99.8082%" y="837" width="0.0959%" height="15" fill="rgb(222,97,12)" fg:x="1041" fg:w="1"/><text x="100.0582%" y="847.50"></text></g><g><title>core::fmt::write (1 samples, 0.10%)</title><rect x="99.8082%" y="821" width="0.0959%" height="15" fill="rgb(219,213,19)" fg:x="1041" fg:w="1"/><text x="100.0582%" y="831.50"></text></g><g><title>core::fmt::run (1 samples, 0.10%)</title><rect x="99.8082%" y="805" width="0.0959%" height="15" fill="rgb(252,169,30)" fg:x="1041" fg:w="1"/><text x="100.0582%" y="815.50"></text></g><g><title>all (1,043 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(206,32,51)" fg:x="0" fg:w="1043"/><text x="0.2500%" y="1119.50"></text></g><g><title>algo (1,043 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(250,172,42)" fg:x="0" fg:w="1043"/><text x="0.2500%" y="1103.50">algo</text></g><g><title>_start (963 samples, 92.33%)</title><rect x="7.6702%" y="1077" width="92.3298%" height="15" fill="rgb(209,34,43)" fg:x="80" fg:w="963"/><text x="7.9202%" y="1087.50">_start</text></g><g><title>_dl_start (1 samples, 0.10%)</title><rect x="99.9041%" y="1061" width="0.0959%" height="15" fill="rgb(223,11,35)" fg:x="1042" fg:w="1"/><text x="100.1541%" y="1071.50"></text></g><g><title>_dl_start_final (1 samples, 0.10%)</title><rect x="99.9041%" y="1045" width="0.0959%" height="15" fill="rgb(251,219,26)" fg:x="1042" fg:w="1"/><text x="100.1541%" y="1055.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.10%)</title><rect x="99.9041%" y="1029" width="0.0959%" height="15" fill="rgb(231,119,3)" fg:x="1042" fg:w="1"/><text x="100.1541%" y="1039.50"></text></g><g><title>dl_platform_init (1 samples, 0.10%)</title><rect x="99.9041%" y="1013" width="0.0959%" height="15" fill="rgb(216,97,11)" fg:x="1042" fg:w="1"/><text x="100.1541%" y="1023.50"></text></g><g><title>init_cpu_features (1 samples, 0.10%)</title><rect x="99.9041%" y="997" width="0.0959%" height="15" fill="rgb(223,59,9)" fg:x="1042" fg:w="1"/><text x="100.1541%" y="1007.50"></text></g><g><title>dl_init_cacheinfo (1 samples, 0.10%)</title><rect x="99.9041%" y="981" width="0.0959%" height="15" fill="rgb(233,93,31)" fg:x="1042" fg:w="1"/><text x="100.1541%" y="991.50"></text></g><g><title>get_common_cache_info (1 samples, 0.10%)</title><rect x="99.9041%" y="965" width="0.0959%" height="15" fill="rgb(239,81,33)" fg:x="1042" fg:w="1"/><text x="100.1541%" y="975.50"></text></g></svg></svg>